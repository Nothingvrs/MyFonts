"""
MyFonts Backend API
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
"""

from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from typing import List, Optional
import logging
import os
from pathlib import Path
import asyncio

from .services.font_analyzer import FontAnalyzer
from .services.font_matcher import FontMatcher
from .models.font_models import FontAnalysisResult, FontInfo, AnalysisRequest
from .database.font_database import FontDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="MyFonts API",
    description="API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://localhost:5173",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:5173",
        "http://localhost:4173",
        "http://127.0.0.1:4173",
    ],  # dev —Å–µ—Ä–≤–µ—Ä—ã (Vite/React)
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
font_analyzer = FontAnalyzer()
font_matcher = FontMatcher()
font_database = FontDatabase()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = Path("uploads")
UPLOAD_DIR.mkdir(exist_ok=True)


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ MyFonts API...")
    try:
        await font_database.initialize()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except asyncio.CancelledError:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ uvicorn/–º–æ–¥–µ–ª–µ–π –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å startup ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–æ–π
        logger.warning("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã —à—Ä–∏—Ñ—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞ (reload), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è")
    except Exception as e:
        logger.warning(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {str(e)}")
        logger.info("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤")


@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ MyFonts API...")


@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "MyFonts API - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤",
        "version": "1.0.0",
        "docs": "/docs"
    }


@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PaddleOCR
        paddleocr_status = "available" if font_analyzer.paddleocr_service.is_available() else "unavailable"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_status = "available"
        try:
            await font_database.get_fonts(limit=1)
        except:
            db_status = "unavailable"
        
        overall_status = "healthy" if paddleocr_status == "available" and db_status == "available" else "degraded"
        
        return {
            "status": overall_status,
            "message": "API —Ä–∞–±–æ—Ç–∞–µ—Ç" if overall_status == "healthy" else "API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏",
            "services": {
                "paddleocr": paddleocr_status,
                "database": db_status
            },
            "paddleocr_available": paddleocr_status == "available"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ health check: {str(e)}")
        return {
            "status": "unhealthy",
            "message": "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "error": str(e)
        }


@app.get("/api/paddleocr-status")
async def paddleocr_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PaddleOCR"""
    try:
        is_available = font_analyzer.paddleocr_service.is_available()
        
        if is_available:
            return {
                "status": "available",
                "message": "PaddleOCR –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                "can_analyze": True
            }
        else:
            return {
                "status": "unavailable",
                "message": "PaddleOCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∞–Ω–∞–ª–∏–∑ —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω",
                "can_analyze": False,
                "suggestion": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ PaddleOCR: {str(e)}")
        return {
            "status": "error",
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ PaddleOCR",
            "can_analyze": False,
            "error": str(e)
        }


@app.post("/api/paddleocr-reinit")
async def paddleocr_reinit():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR"""
    try:
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR...")
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PaddleOCR
        success = font_analyzer.paddleocr_service.reinitialize()
        
        if success:
            return {
                "success": True,
                "message": "PaddleOCR —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                "status": "available"
            }
        else:
            return {
                "success": False,
                "message": "PaddleOCR –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
                "status": "unavailable"
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaddleOCR: {str(e)}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}",
            "status": "error"
        }


@app.post("/api/paddleocr-test")
async def paddleocr_test(file: UploadFile = File(...)):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaddleOCR –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaddleOCR –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type or not file.content_type.startswith("image/"):
            raise HTTPException(
                status_code=400,
                detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"
            )
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        contents = await file.read()
        logger.info(f"üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}, —Ä–∞–∑–º–µ—Ä: {len(contents)} –±–∞–π—Ç")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        import cv2
        import numpy as np
        from PIL import Image
        import io
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ numpy array
        image = Image.open(io.BytesIO(contents))
        image_np = np.array(image)
        
        if len(image_np.shape) == 3:
            image_np = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)
        
        logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image_np.shape}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º PaddleOCR
        result = await font_analyzer.paddleocr_service.detect_and_analyze_text(image_np)
        
        return {
            "success": True,
            "message": "–¢–µ—Å—Ç PaddleOCR –∑–∞–≤–µ—Ä—à–µ–Ω",
            "result": result,
            "image_info": {
                "shape": image_np.shape,
                "filename": file.filename,
                "size_bytes": len(contents)
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PaddleOCR: {str(e)}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            "error": str(e)
        }


@app.post("/api/refresh-fonts")
async def refresh_google_fonts():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Fonts"""
    try:
        success = await font_database.refresh_google_fonts()
        if success:
            total_fonts = len(font_database.get_all_fonts_sync())
            return {
                "success": True,
                "message": "Google Fonts —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                "total_fonts": total_fonts
            }
        else:
            return {
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Fonts"
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤: {str(e)}"
        )


@app.post("/api/analyze-font", response_model=FontAnalysisResult)
async def analyze_font(file: UploadFile = File(...)):
    """
    –ê–Ω–∞–ª–∏–∑ —à—Ä–∏—Ñ—Ç–∞ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type or not file.content_type.startswith("image/"):
            raise HTTPException(
                status_code=400,
                detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (PNG, JPG, JPEG, GIF, BMP, WebP)"
            )
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        contents = await file.read()
        
        logger.info(f"üìÅ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}, —Ä–∞–∑–º–µ—Ä: {len(contents)} –±–∞–π—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info("üß† –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        characteristics = await font_analyzer.analyze_image(contents)
        logger.info("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ö–æ–∂–∏–µ —à—Ä–∏—Ñ—Ç—ã (—Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø–æ–ª–Ω–æ–π –±–∞–∑–æ–π Google Fonts)
        logger.info("üîé –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —à—Ä–∏—Ñ—Ç—ã...")
        matches = await font_matcher.find_matches(characteristics)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        
        return FontAnalysisResult(
            success=True,
            message="–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            matches=matches,
            characteristics=characteristics
        )
        
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        logger.error(f"üìä –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        import traceback
        logger.error(f"üîç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç" in str(e).lower() or "–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç" in str(e).lower():
            return FontAnalysisResult(
                success=False,
                message="–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —á–µ—Ç–∫–∏–º, —á–∏—Ç–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º.",
                matches=[],
                error="NO_TEXT_DETECTED"
            )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤" in str(e).lower():
            return FontAnalysisResult(
                success=False,
                message="–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ–¥–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞.",
                matches=[],
                error="MULTIPLE_FONTS_DETECTED"
            )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ PaddleOCR
        if "paddleocr" in str(e).lower() or "ocr" in str(e).lower() or "ocr –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç" in str(e).lower():
            return FontAnalysisResult(
                success=False,
                message="OCR –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.",
                matches=[],
                error="OCR_ERROR"
            )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò
        if "–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in str(e).lower() or "—Å–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in str(e).lower():
            return FontAnalysisResult(
                success=False,
                message="–ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                matches=[],
                error="AI_SERVICE_UNAVAILABLE"
            )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaddleOCR
        if "–Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" in str(e).lower() or "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in str(e).lower():
            return FontAnalysisResult(
                success=False,
                message="–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                matches=[],
                error="SERVICE_UNAVAILABLE"
            )
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        )


@app.get("/api/fonts", response_model=List[FontInfo])
async def get_fonts(category: Optional[str] = None):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        fonts = await font_database.get_fonts(category=category)
        return fonts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤")


@app.get("/api/fonts/{font_id}", response_model=FontInfo)
async def get_font_by_id(font_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ
    """
    try:
        font = await font_database.get_font_by_id(font_id)
        if not font:
            raise HTTPException(status_code=404, detail="–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return font
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞ {font_id}: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ä–∏—Ñ—Ç–µ")


@app.get("/api/fonts/search/{query}")
async def search_fonts(query: str):
    """
    –ü–æ–∏—Å–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    """
    try:
        fonts = await font_database.search_fonts(query)
        return fonts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —à—Ä–∏—Ñ—Ç–æ–≤ '{query}': {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —à—Ä–∏—Ñ—Ç–æ–≤")


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )

