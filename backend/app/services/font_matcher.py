"""
–°–µ—Ä–≤–∏—Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
"""

import logging
from typing import List, Dict
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

from ..models.font_models import FontCharacteristics, FontMatch, FontInfo, FontCategory
from ..database.font_database import FontDatabase

logger = logging.getLogger(__name__)


class FontMatcher:
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    
    def __init__(self):
        self.font_database = FontDatabase()
        
        # –£–õ–£–ß–®–ï–ù–ù–´–ï –≤–µ—Å–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        self.weights = {
            'serifs': 0.25,        # –í–∞–∂–Ω–æ—Å—Ç—å –∑–∞—Å–µ—á–µ–∫ (–ø–æ–≤—ã—à–µ–Ω–∞)
            'stroke_width': 0.20,   # –í–∞–∂–Ω–æ—Å—Ç—å —Ç–æ–ª—â–∏–Ω—ã —à—Ç—Ä–∏—Ö–æ–≤ (–ø–æ–≤—ã—à–µ–Ω–∞)
            'contrast': 0.15,       # –í–∞–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            'cyrillic': 0.30,       # –í–∞–∂–Ω–æ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π (–ø–æ–≤—ã—à–µ–Ω–∞)
            'geometric': 0.10,      # –í–∞–∂–Ω–æ—Å—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–ø–æ–Ω–∏–∂–µ–Ω–∞)
            'spacing': 0.10         # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self.similarity_thresholds = {
            'excellent': 0.85,      # –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            'good': 0.70,           # –•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            'acceptable': 0.50,     # –ü—Ä–∏–µ–º–ª–µ–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            'poor': 0.30            # –ü–ª–æ—Ö–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        }
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤
        self.font_type_weights = {
            'serif': {
                'serifs': 0.30,     # –ó–∞—Å–µ—á–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è serif
                'stroke_width': 0.25,
                'contrast': 0.20,
                'cyrillic': 0.25
            },
            'sans-serif': {
                'serifs': 0.15,     # –ó–∞—Å–µ—á–∫–∏ –Ω–µ –≤–∞–∂–Ω—ã –¥–ª—è sans-serif
                'stroke_width': 0.30,
                'contrast': 0.20,
                'cyrillic': 0.35
            },
            'display': {
                'serifs': 0.20,
                'stroke_width': 0.35,  # –¢–æ–ª—â–∏–Ω–∞ –≤–∞–∂–Ω–∞ –¥–ª—è display
                'contrast': 0.25,
                'cyrillic': 0.20
            }
        }
    
    async def find_matches(self, characteristics: FontCharacteristics, max_results: int = 10) -> List[FontMatch]:
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –¥–æ—Å—Ç—É–ø–æ–º –∫–æ –≤—Å–µ–º Google Fonts
        """
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (–±—ã—Å—Ç—Ä–æ)
            local_fonts = self.font_database.fonts.copy()
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï Google Fonts –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –ø–æ–ª–Ω—ã–π –æ—Ö–≤–∞—Ç)
            google_fonts = await self.font_database.google_fonts_service.get_all_fonts_for_matching()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            all_fonts = local_fonts + google_fonts
            
            if not all_fonts:
                logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –ø—É—Å—Ç–∞")
                return []
            
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(all_fonts)} —à—Ä–∏—Ñ—Ç–æ–≤ ({len(local_fonts)} –ª–æ–∫–∞–ª—å–Ω—ã—Ö + {len(google_fonts)} Google Fonts)")
            
            # –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            prefiltered_fonts = self._prefilter_fonts(all_fonts, characteristics)
            logger.info(f"üìä –ü–æ—Å–ª–µ –ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(prefiltered_fonts)} —à—Ä–∏—Ñ—Ç–æ–≤")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
            matches = []
            processed = 0
            
            for font in prefiltered_fonts:
                try:
                    # –£–õ–£–ß–®–ï–ù–ù–û–ï –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    confidence = self._calculate_enhanced_match(characteristics, font.characteristics, font.category)
                    match_details = self._calculate_detailed_match(characteristics, font.characteristics)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    if confidence >= self.similarity_thresholds['acceptable']:
                        matches.append(FontMatch(
                            font_info=font,
                            confidence=confidence,
                            match_details=match_details
                        ))
                    
                    processed += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 200 —à—Ä–∏—Ñ—Ç–æ–≤
                    if processed % 200 == 0:
                        logger.info(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed}/{len(prefiltered_fonts)} —à—Ä–∏—Ñ—Ç–æ–≤...")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞ {font.name}: {str(e)}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            matches.sort(key=lambda x: x.confidence, reverse=True)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result = matches[:max_results]
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result)} –ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–∑ {len(all_fonts)} —à—Ä–∏—Ñ—Ç–æ–≤")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, match in enumerate(result[:3], 1):
                logger.info(f"  {i}. {match.font_info.name} - {match.confidence:.1%} ({match.font_info.category.value})")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {str(e)}")
            return []
    
    def _prefilter_fonts(self, fonts: List[FontInfo], characteristics: FontCharacteristics) -> List[FontInfo]:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            prefiltered = []
            
            for font in fonts:
                # 1. –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞—Å–µ—á–∫–∞–º (–∫—Ä–∏—Ç–∏—á–Ω–æ)
                if font.characteristics.has_serifs != characteristics.has_serifs:
                    continue
                
                # 2. –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                if not font.cyrillic_support:
                    continue
                
                # 3. –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è)
                # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                
                prefiltered.append(font)
            
            logger.info(f"üìä –ü—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: {len(fonts)} ‚Üí {len(prefiltered)} —à—Ä–∏—Ñ—Ç–æ–≤")
            return prefiltered
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
            return fonts  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —à—Ä–∏—Ñ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _calculate_enhanced_match(self, analyzed: FontCharacteristics, reference: FontCharacteristics, 
                                 font_category: FontCategory) -> float:
        """
        –£–õ–£–ß–®–ï–ù–ù–û–ï –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à—Ä–∏—Ñ—Ç–∞
        """
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –≤–µ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à—Ä–∏—Ñ—Ç–∞
            category_weights = self.font_type_weights.get(
                font_category.value, 
                self.weights  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞ –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            )
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞—Å–µ—á–µ–∫ (–±–∏–Ω–∞—Ä–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞)
            serif_match = 1.0 if analyzed.has_serifs == reference.has_serifs else 0.0
            
            # –£–õ–£–ß–®–ï–ù–ù–û–ï —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã —à—Ç—Ä–∏—Ö–æ–≤
            stroke_match = self._compare_enhanced_numeric(
                analyzed.stroke_width, reference.stroke_width, 
                tolerance=0.3  # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å
            )
            
            # –£–õ–£–ß–®–ï–ù–ù–û–ï —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            contrast_match = self._compare_enhanced_numeric(
                analyzed.contrast, reference.contrast, 
                tolerance=0.4  # –ö–æ–Ω—Ç—Ä–∞—Å—Ç –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å—Å—è
            )
            
            # –£–õ–£–ß–®–ï–ù–ù–û–ï —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
            cyrillic_match = self._compare_enhanced_cyrillic_features(
                analyzed.cyrillic_features, 
                reference.cyrillic_features
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            total_score = (
                serif_match * category_weights['serifs'] +
                stroke_match * category_weights['stroke_width'] +
                contrast_match * category_weights['contrast'] +
                cyrillic_match * category_weights['cyrillic']
            )
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ë–û–ù–£–°–´
            bonus = 0.0
            
            # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∑–∞—Å–µ—á–µ–∫
            if serif_match == 1.0:
                bonus += 0.05
            
            # –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            if cyrillic_match > 0.8:
                bonus += 0.03
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            if (stroke_match > 0.7 and contrast_match > 0.6):
                bonus += 0.02
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
            total_score = min(1.0, total_score + bonus)
            
            return max(0.0, min(1.0, total_score))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {str(e)}")
            return 0.0
    
    def _compare_enhanced_numeric(self, value1: float, value2: float, tolerance: float = 0.2) -> float:
        """
        –£–õ–£–ß–®–ï–ù–ù–û–ï —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
        """
        try:
            if max(value1, value2) == 0:
                return 1.0 if value1 == value2 else 0.0
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é —Ä–∞–∑–Ω–æ—Å—Ç—å
            diff = abs(value1 - value2)
            max_val = max(value1, value2)
            relative_diff = diff / max_val
            
            # –ï—Å–ª–∏ —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–Ω—å—à–µ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏ - –æ—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if relative_diff <= tolerance:
                return 1.0
            
            # –ï—Å–ª–∏ —Ä–∞–∑–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏ - –ø–ª–∞–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è
            decay_factor = 2.0  # –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è
            similarity = np.exp(-decay_factor * (relative_diff - tolerance))
            
            return max(0.0, similarity)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–º —á–∏—Å–ª–æ–≤–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {str(e)}")
            return 0.0
    
    def _compare_enhanced_cyrillic_features(self, analyzed, reference) -> float:
        """
        –£–õ–£–ß–®–ï–ù–ù–û–ï —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
        """
        try:
            features = ['ya_shape', 'zh_shape', 'fi_shape', 'shcha_shape', 'yery_shape']
            
            total_match = 0.0
            feature_weights = [0.25, 0.20, 0.20, 0.20, 0.15]  # –†–∞–∑–Ω—ã–µ –≤–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—É–∫–≤
            
            for i, feature in enumerate(features):
                try:
                    analyzed_val = getattr(analyzed, feature, 0.5)
                    reference_val = getattr(reference, feature, 0.5)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
                    match = self._compare_enhanced_numeric(analyzed_val, reference_val, tolerance=0.3)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
                    total_match += match * feature_weights[i]
                    
                except AttributeError:
                    # –ï—Å–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    total_match += 0.5 * feature_weights[i]
            
            return total_match
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {str(e)}")
            return 0.0
    
    def _calculate_match(self, analyzed: FontCharacteristics, reference: FontCharacteristics) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞
        """
        try:
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞—Å–µ—á–µ–∫ (–±–∏–Ω–∞—Ä–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞)
            serif_match = 1.0 if analyzed.has_serifs == reference.has_serifs else 0.0
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã —à—Ç—Ä–∏—Ö–æ–≤
            stroke_match = self._compare_numeric(analyzed.stroke_width, reference.stroke_width)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            contrast_match = self._compare_numeric(analyzed.contrast, reference.contrast)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
            cyrillic_match = self._compare_cyrillic_features(
                analyzed.cyrillic_features, 
                reference.cyrillic_features
            )
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            geometric_match = self._compare_geometric_features(analyzed, reference)
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            spacing_match = self._compare_spacing_features(analyzed, reference)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Å—É–º–º—É
            total_score = (
                serif_match * self.weights['serifs'] +
                stroke_match * self.weights['stroke_width'] +
                contrast_match * self.weights['contrast'] +
                cyrillic_match * self.weights['cyrillic'] +
                geometric_match * self.weights['geometric'] +
                spacing_match * self.weights['spacing']
            )
            
            return max(0.0, min(1.0, total_score))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {str(e)}")
            return 0.0
    
    def _calculate_detailed_match(self, analyzed: FontCharacteristics, reference: FontCharacteristics) -> Dict[str, float]:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å—Ö–æ–¥—Å—Ç–≤–∞
        """
        try:
            serif_match = 1.0 if analyzed.has_serifs == reference.has_serifs else 0.0
            stroke_match = self._compare_numeric(analyzed.stroke_width, reference.stroke_width)
            contrast_match = self._compare_numeric(analyzed.contrast, reference.contrast)
            cyrillic_match = self._compare_cyrillic_features(
                analyzed.cyrillic_features, 
                reference.cyrillic_features
            )
            geometric_match = self._compare_geometric_features(analyzed, reference)
            spacing_match = self._compare_spacing_features(analyzed, reference)
            
            overall_score = (
                serif_match * self.weights['serifs'] +
                stroke_match * self.weights['stroke_width'] +
                contrast_match * self.weights['contrast'] +
                cyrillic_match * self.weights['cyrillic'] +
                geometric_match * self.weights['geometric'] +
                spacing_match * self.weights['spacing']
            )
            
            return {
                'overall_score': overall_score,
                'serif_match': serif_match,
                'stroke_match': stroke_match,
                'contrast_match': contrast_match,
                'cyrillic_match': cyrillic_match,
                'geometric_match': geometric_match,
                'spacing_match': spacing_match
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {str(e)}")
            return {
                'overall_score': 0.0,
                'serif_match': 0.0,
                'stroke_match': 0.0,
                'contrast_match': 0.0,
                'cyrillic_match': 0.0,
                'geometric_match': 0.0,
                'spacing_match': 0.0
            }
    
    def _compare_numeric(self, value1: float, value2: float) -> float:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        """
        if max(value1, value2) == 0:
            return 1.0 if value1 == value2 else 0.0
        
        diff = abs(value1 - value2)
        max_val = max(value1, value2)
        
        return max(0.0, 1.0 - diff / max_val)
    
    def _compare_cyrillic_features(self, analyzed, reference) -> float:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
        """
        try:
            features = ['ya_shape', 'zh_shape', 'fi_shape', 'shcha_shape', 'yery_shape']
            
            total_match = 0.0
            for feature in features:
                analyzed_val = getattr(analyzed, feature)
                reference_val = getattr(reference, feature)
                match = self._compare_numeric(analyzed_val, reference_val)
                total_match += match
            
            return total_match / len(features)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {str(e)}")
            return 0.0
    
    def _compare_geometric_features(self, analyzed: FontCharacteristics, reference: FontCharacteristics) -> float:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        """
        try:
            features = [
                ('x_height', 0.3),
                ('cap_height', 0.3),
                ('ascender', 0.2),
                ('descender', 0.2)
            ]
            
            weighted_match = 0.0
            total_weight = 0.0
            
            for feature_name, weight in features:
                analyzed_val = getattr(analyzed, feature_name)
                reference_val = getattr(reference, feature_name)
                
                match = self._compare_numeric(analyzed_val, reference_val)
                weighted_match += match * weight
                total_weight += weight
            
            return weighted_match / total_weight if total_weight > 0 else 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {str(e)}")
            return 0.0
    
    def _compare_spacing_features(self, analyzed: FontCharacteristics, reference: FontCharacteristics) -> float:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        """
        try:
            features = [
                ('letter_spacing', 0.4),
                ('word_spacing', 0.3),
                ('density', 0.3)
            ]
            
            weighted_match = 0.0
            total_weight = 0.0
            
            for feature_name, weight in features:
                analyzed_val = getattr(analyzed, feature_name)
                reference_val = getattr(reference, feature_name)
                
                match = self._compare_numeric(analyzed_val, reference_val)
                weighted_match += match * weight
                total_weight += weight
            
            return weighted_match / total_weight if total_weight > 0 else 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {str(e)}")
            return 0.0
    
    def filter_by_confidence(self, matches: List[FontMatch], min_confidence: float) -> List[FontMatch]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        return [match for match in matches if match.confidence >= min_confidence]
    
    def group_by_category(self, matches: List[FontMatch]) -> Dict[str, List[FontMatch]]:
        """
        –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        grouped = {}
        
        for match in matches:
            category = match.font_info.category.value
            if category not in grouped:
                grouped[category] = []
            grouped[category].append(match)
        
        return grouped

