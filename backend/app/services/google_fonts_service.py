"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Fonts API
"""

import logging
import asyncio
import aiohttp
import json
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
from pathlib import Path

from ..models.font_models import FontInfo, FontCategory, FontCharacteristics, CyrillicFeatures

logger = logging.getLogger(__name__)


class GoogleFontsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Fonts API"""
    
    def __init__(self, api_key: Optional[str] = None):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–ª—é—á, –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è,
        # –∏–Ω–∞—á–µ ‚Äî fallback –Ω–∞ –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞ (–∫–∞–∫ —Ä–∞–Ω–µ–µ –±—ã–ª–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ)
        import os
        fallback_key = "AIzaSyBGG0iqkjWIr8SlH8au0vQbmfojz7wtrKs"
        self.api_key = api_key or os.environ.get("GOOGLE_FONTS_API_KEY") or fallback_key
        self.base_url = "https://www.googleapis.com/webfonts/v1/webfonts"
        self.cache_file = Path("google_fonts_cache.json")
        self.cache_duration = timedelta(hours=24)  # –ö—ç—à –Ω–∞ 24 —á–∞—Å–∞
        self._fonts_cache: List[Dict] = []
        self._last_update: Optional[datetime] = None
        self._all_fonts_cache: List[FontInfo] = []  # –ö—ç—à –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        self._all_fonts_cache_time: Optional[datetime] = None
    
    async def get_fonts(self, force_refresh: bool = False) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –∏–∑ Google Fonts"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if not force_refresh and self._is_cache_valid():
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Google Fonts")
                return self._fonts_cache
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –∫—ç—à–∞
            if not force_refresh and self._load_from_file_cache():
                logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω—ã Google Fonts –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞")
                return self._fonts_cache
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å API
            logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º Google Fonts —Å API...")
            fonts = await self._fetch_from_api()
            
            if fonts:
                self._fonts_cache = fonts
                self._last_update = datetime.now()
                self._save_to_file_cache()
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(fonts)} —à—Ä–∏—Ñ—Ç–æ–≤ –∏–∑ Google Fonts API")
            
            return fonts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Google Fonts: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
            return self._fonts_cache if self._fonts_cache else []
    
    async def _fetch_from_api(self) -> List[Dict]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å Google Fonts API"""
        try:
            # Google Fonts API —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∫–ª—é—á–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            params = {"sort": "popularity"}
            if self.api_key:
                params["key"] = self.api_key
            
            headers = {
                'User-Agent': 'MyFonts/1.0 (Font Identification Service)',
                'Accept': 'application/json',
                'Accept-Encoding': 'gzip, deflate'
            }
            
            timeout = aiohttp.ClientTimeout(total=60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            
            async with aiohttp.ClientSession(timeout=timeout, headers=headers) as session:
                logger.info(f"üîó –ó–∞–ø—Ä–æ—Å –∫ Google Fonts API: {self.base_url}")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                max_retries = 3
                for attempt in range(max_retries):
                    try:
                        async with session.get(self.base_url, params=params) as response:
                            logger.info(f"üì° Google Fonts API –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status}")
                            
                            if response.status == 200:
                                data = await response.json()
                                items = data.get("items", [])
                                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} —à—Ä–∏—Ñ—Ç–æ–≤ –∏–∑ Google Fonts API")
                                return items
                            elif response.status == 429:  # Rate limit
                                if attempt < max_retries - 1:
                                    wait_time = (attempt + 1) * 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                                    logger.warning(f"‚ö†Ô∏è Rate limit, –∂–¥–µ–º {wait_time} —Å–µ–∫...")
                                    await asyncio.sleep(wait_time)
                                    continue
                                else:
                                    logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Google Fonts API")
                                    return []
                            else:
                                error_text = await response.text()
                                logger.error(f"‚ùå Google Fonts API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}: {error_text}")
                                
                                # –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ—à–∏–±–æ–∫
                                if response.status >= 500 and attempt < max_retries - 1:
                                    wait_time = (attempt + 1) * 2
                                    logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞, –∂–¥–µ–º {wait_time} —Å–µ–∫...")
                                    await asyncio.sleep(wait_time)
                                    continue
                                else:
                                    return []
                                    
                    except asyncio.TimeoutError:
                        if attempt < max_retries - 1:
                            wait_time = (attempt + 1) * 3
                            logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                            await asyncio.sleep(wait_time)
                            continue
                        else:
                            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Fonts API")
                            return []
                            
                    except Exception as e:
                        if attempt < max_retries - 1:
                            wait_time = (attempt + 1) * 2
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫: {str(e)}")
                            await asyncio.sleep(wait_time)
                            continue
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Fonts API: {str(e)}")
                            return []
                
                return []
                        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Fonts API: {str(e)}")
            return []
    
    def _is_cache_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
        if not self._fonts_cache or not self._last_update:
            return False
        
        return datetime.now() - self._last_update < self.cache_duration
    
    def _load_from_file_cache(self) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞"""
        try:
            if not self.cache_file.exists():
                logger.info("üìÅ –§–∞–π–ª –∫—ç—à–∞ Google Fonts –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = self.cache_file.stat().st_size
            if file_size < 1000:  # –ú–µ–Ω—å—à–µ 1KB - —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
                logger.warning("‚ö†Ô∏è –§–∞–π–ª –∫—ç—à–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, —Å—á–∏—Ç–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º")
                return False
            
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—ç—à–∞
            if not isinstance(cache_data, dict) or 'timestamp' not in cache_data or 'fonts' not in cache_data:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫—ç—à–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∫—ç—à–∞
            try:
                cache_time = datetime.fromisoformat(cache_data.get("timestamp", ""))
                if datetime.now() - cache_time > self.cache_duration:
                    logger.info("üìÖ –ö—ç—à Google Fonts —É—Å—Ç–∞—Ä–µ–ª")
                    return False
            except ValueError:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫—ç—à–µ")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç–æ–≤
            fonts = cache_data.get("fonts", [])
            if not isinstance(fonts, list) or len(fonts) < 100:
                logger.warning("‚ö†Ô∏è –ö—ç—à —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤")
                return False
            
            self._fonts_cache = fonts
            self._last_update = cache_time
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω –∫—ç—à Google Fonts: {len(fonts)} —à—Ä–∏—Ñ—Ç–æ–≤ –æ—Ç {cache_time.strftime('%Y-%m-%d %H:%M')}")
            return True
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∫—ç—à–∞: {str(e)}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞: {str(e)}")
            return False
    
    def _save_to_file_cache(self):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à"""
        try:
            if not self._fonts_cache:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à")
                return
            
            cache_data = {
                "timestamp": datetime.now().isoformat(),
                "fonts": self._fonts_cache,
                "version": "1.0",
                "count": len(self._fonts_cache)
            }
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            temp_cache_file = self.cache_file.with_suffix('.tmp')
            
            with open(temp_cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, ensure_ascii=False, indent=2)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –Ω–æ–≤—ã–º
            temp_cache_file.replace(self.cache_file)
            
            logger.info(f"üíæ –ö—ç—à Google Fonts —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(self._fonts_cache)} —à—Ä–∏—Ñ—Ç–æ–≤")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞: {str(e)}")
    
    def convert_to_font_info(self, google_font: Dict, font_id: int) -> FontInfo:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Google Font –≤ FontInfo"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_map = {
                "serif": FontCategory.SERIF,
                "sans-serif": FontCategory.SANS_SERIF,
                "monospace": FontCategory.MONOSPACE,
                "display": FontCategory.DISPLAY,
                "handwriting": FontCategory.SCRIPT
            }
            
            category = category_map.get(
                google_font.get("category", "sans-serif"),
                FontCategory.SANS_SERIF
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            subsets = google_font.get("subsets", [])
            cyrillic_support = "cyrillic" in subsets or "cyrillic-ext" in subsets
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
            characteristics = self._generate_characteristics(google_font, category, cyrillic_support)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (Google Fonts –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏)
            # –ü–µ—Ä–≤—ã–µ 50 - –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ, —Å–ª–µ–¥—É—é—â–∏–µ 200 - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Å—Ä–µ–¥–Ω–∏–µ/–Ω–∏–∑–∫–∏–µ
            popularity = 0.9 if font_id <= 50 else (0.7 if font_id <= 250 else 0.4)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —à—Ä–∏—Ñ—Ç–∞ –≤ Google Fonts
            family = google_font["family"]
            gf_family_path = family.replace(" ", "+")
            download_url = f"https://fonts.google.com/specimen/{gf_family_path}"

            return FontInfo(
                id=font_id,
                name=google_font["family"],
                category=category,
                characteristics=characteristics,
                popularity=popularity,
                cyrillic_support=cyrillic_support,
                designer=None,  # Google Fonts API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                year=None,
                foundry="Google Fonts",
                description=f"–®—Ä–∏—Ñ—Ç –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Google Fonts, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.value}",
                license="OFL",  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ Google Fonts –ø–æ–¥ OFL –ª–∏—Ü–µ–Ω–∑–∏–µ–π
                download_url=download_url
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Google Font {google_font.get('family', 'Unknown')}: {str(e)}")
            return None
    
    def _generate_characteristics(self, google_font: Dict, category: FontCategory, cyrillic_support: bool) -> FontCharacteristics:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        
        # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        base_chars = {
            FontCategory.SERIF: {
                "has_serifs": True,
                "stroke_width": 0.14,
                "contrast": 0.7,
                "slant": 0.0,
                "x_height": 48.0,
                "cap_height": 68.0,
                "ascender": 82.0,
                "descender": 22.0,
                "letter_spacing": 2.2,
                "word_spacing": 6.5,
                "density": 0.38
            },
            FontCategory.SANS_SERIF: {
                "has_serifs": False,
                "stroke_width": 0.16,
                "contrast": 0.25,
                "slant": 0.0,
                "x_height": 53.0,
                "cap_height": 70.0,
                "ascender": 80.0,
                "descender": 20.0,
                "letter_spacing": 1.6,
                "word_spacing": 5.2,
                "density": 0.43
            },
            FontCategory.MONOSPACE: {
                "has_serifs": False,
                "stroke_width": 0.16,
                "contrast": 0.2,
                "slant": 0.0,
                "x_height": 52.0,
                "cap_height": 70.0,
                "ascender": 80.0,
                "descender": 20.0,
                "letter_spacing": 0.0,
                "word_spacing": 10.0,
                "density": 0.4
            },
            FontCategory.DISPLAY: {
                "has_serifs": False,
                "stroke_width": 0.22,
                "contrast": 0.1,
                "slant": 0.0,
                "x_height": 60.0,
                "cap_height": 70.0,
                "ascender": 75.0,
                "descender": 15.0,
                "letter_spacing": 2.0,
                "word_spacing": 6.0,
                "density": 0.5
            },
            FontCategory.SCRIPT: {
                "has_serifs": False,
                "stroke_width": 0.2,
                "contrast": 0.5,
                "slant": 15.0,
                "x_height": 45.0,
                "cap_height": 65.0,
                "ascender": 80.0,
                "descender": 25.0,
                "letter_spacing": 1.0,
                "word_spacing": 4.0,
                "density": 0.35
            }
        }
        
        chars = base_chars.get(category, base_chars[FontCategory.SANS_SERIF]).copy()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞
        font_name = google_font.get("family", "")
        name_hash = hash(font_name) % 1000  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö–µ—à –æ—Ç 0 –¥–æ 999
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ
        variation = (name_hash / 1000.0 - 0.5) * 0.3  # –û—Ç -0.15 –¥–æ +0.15
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –∫ —á–∏—Å–ª–æ–≤—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
        chars["stroke_width"] = max(0.05, min(1.0, chars["stroke_width"] + variation * 0.2))
        chars["contrast"] = max(0.0, min(1.0, chars["contrast"] + variation * 0.4))
        chars["slant"] = max(-45.0, min(45.0, chars["slant"] + variation * 10))
        chars["x_height"] = max(20.0, chars["x_height"] + variation * 15)
        chars["cap_height"] = max(30.0, chars["cap_height"] + variation * 10)
        chars["ascender"] = max(40.0, chars["ascender"] + variation * 8)
        chars["descender"] = max(5.0, chars["descender"] + variation * 5)
        chars["letter_spacing"] = max(0.0, chars["letter_spacing"] + variation * 1.0)
        chars["word_spacing"] = max(2.0, chars["word_spacing"] + variation * 2.0)
        chars["density"] = max(0.1, min(1.0, chars["density"] + variation * 0.2))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
        if cyrillic_support:
            # –•–æ—Ä–æ—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã + –≤–∞—Ä–∏–∞—Ü–∏—è
            cyrillic_features = CyrillicFeatures(
                ya_shape=max(0.0, min(1.0, 0.85 + variation * 0.2)),
                zh_shape=max(0.0, min(1.0, 0.85 + variation * 0.2)),
                fi_shape=max(0.0, min(1.0, 0.85 + variation * 0.2)),
                shcha_shape=max(0.0, min(1.0, 0.9 + variation * 0.15)),
                yery_shape=max(0.0, min(1.0, 0.85 + variation * 0.2))
            )
        else:
            # –°–ª–∞–±–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ + –≤–∞—Ä–∏–∞—Ü–∏—è
            cyrillic_features = CyrillicFeatures(
                ya_shape=max(0.0, min(1.0, 0.5 + variation * 0.3)),
                zh_shape=max(0.0, min(1.0, 0.5 + variation * 0.3)),
                fi_shape=max(0.0, min(1.0, 0.5 + variation * 0.3)),
                shcha_shape=max(0.0, min(1.0, 0.5 + variation * 0.3)),
                yery_shape=max(0.0, min(1.0, 0.5 + variation * 0.3))
            )
        
        return FontCharacteristics(
            cyrillic_features=cyrillic_features,
            **chars
        )
    
    async def search_fonts(self, query: str, limit: int = 50) -> List[FontInfo]:
        """–ü–æ–∏—Å–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–æ –≤—Å–µ–π –±–∞–∑–µ Google Fonts"""
        try:
            google_fonts = await self.get_fonts()
            query_lower = query.lower()
            
            results = []
            font_id = 10000  # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–æ–ª—å—à–æ–≥–æ ID —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏
            
            for font_data in google_fonts:
                if len(results) >= limit:
                    break
                
                font_name = font_data.get("family", "").lower()
                if query_lower in font_name:
                    font_info = self.convert_to_font_info(font_data, font_id)
                    if font_info:
                        results.append(font_info)
                        font_id += 1
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Google Fonts: {str(e)}")
            return []
    
    async def get_all_fonts_for_matching(self) -> List[FontInfo]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• Google Fonts –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
            if (self._all_fonts_cache and 
                self._all_fonts_cache_time and 
                datetime.now() - self._all_fonts_cache_time < self.cache_duration):
                logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ {len(self._all_fonts_cache)} –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Google Fonts")
                return self._all_fonts_cache
            
            logger.info("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï Google Fonts –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            google_fonts = await self.get_fonts()
            if not google_fonts:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Google Fonts, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à")
                return self._all_fonts_cache if self._all_fonts_cache else []
            
            results = []
            font_id = 10000
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞)
            total = len(google_fonts)
            cyrillic_count = 0
            conversion_errors = 0
            
            for i, font_data in enumerate(google_fonts):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                    subsets = font_data.get('subsets', [])
                    has_cyrillic = any(subset in ['cyrillic', 'cyrillic-ext'] for subset in subsets)
                    
                    if has_cyrillic:  # –¢–û–õ–¨–ö–û –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã!
                        font_info = self.convert_to_font_info(font_data, font_id)
                        if font_info:
                            results.append(font_info)
                            font_id += 1
                            cyrillic_count += 1
                        else:
                            conversion_errors += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 —à—Ä–∏—Ñ—Ç–æ–≤
                    if (i + 1) % 500 == 0:
                        logger.info(f"üá∑üá∫ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{total} —à—Ä–∏—Ñ—Ç–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {cyrillic_count} –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö")
                
                except Exception as e:
                    conversion_errors += 1
                    if conversion_errors <= 5:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞ {font_data.get('family', 'Unknown')}: {str(e)}")
                    continue
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._all_fonts_cache = results
            self._all_fonts_cache_time = datetime.now()
            
            logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(results)} Google Fonts –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
            if conversion_errors > 0:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {conversion_errors} —à—Ä–∏—Ñ—Ç–æ–≤")
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Google Fonts: {str(e)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
            if self._all_fonts_cache:
                logger.info(f"üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à: {len(self._all_fonts_cache)} —à—Ä–∏—Ñ—Ç–æ–≤")
                return self._all_fonts_cache
            else:
                logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Google Fonts")
                return []
    
    async def get_popular_fonts(self, limit: int = 100) -> List[FontInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤"""
        try:
            google_fonts = await self.get_fonts()
            
            results = []
            font_id = 10000
            
            # Google Fonts —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            for font_data in google_fonts[:limit]:
                font_info = self.convert_to_font_info(font_data, font_id)
                if font_info:
                    results.append(font_info)
                    font_id += 1
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö Google Fonts: {str(e)}")
            return []
