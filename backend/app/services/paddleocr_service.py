"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PaddleOCR - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
"""

import logging
import numpy as np
import cv2
from typing import List, Tuple, Optional, Dict, Any
from pathlib import Path
import asyncio
from concurrent.futures import ThreadPoolExecutor

from ..config.ocr_config import get_ocr_config, get_text_quality_config, get_multiple_fonts_config

# –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º logger
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try:
    import numpy as np
    logger.info("‚úÖ NumPy –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    logger.error(f"‚ùå NumPy –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
    raise

try:
    import cv2
    logger.info("‚úÖ OpenCV –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    logger.error(f"‚ùå OpenCV –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
    raise

try:
    from paddleocr import PaddleOCR
    PADDLEOCR_AVAILABLE = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PaddleOCR
    try:
        import paddleocr
        version = getattr(paddleocr, '__version__', 'unknown')
        logger.info(f"üì¶ PaddleOCR –≤–µ—Ä—Å–∏—è: {version}")
    except Exception as version_error:
        logger.info(f"üì¶ PaddleOCR –≤–µ—Ä—Å–∏—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ (–æ—à–∏–±–∫–∞: {str(version_error)})")
        
except ImportError as e:
    PADDLEOCR_AVAILABLE = False
    PaddleOCR = None
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PaddleOCR: {str(e)}")
    logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paddlepaddle paddleocr")

if PADDLEOCR_AVAILABLE:
    logger.info("‚úÖ PaddleOCR —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
else:
    logger.error("‚ùå PaddleOCR –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")


class PaddleOCRService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é PaddleOCR"""
    
    def __init__(self):
        self.ocr = None
        self.ocr_loose = None
        self.executor = ThreadPoolExecutor(max_workers=1)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        try:
            self._initialize_ocr()
        except Exception as init_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ: {str(init_error)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(init_error).__name__}")
            # –ù–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º self.ocr = None
    
    def _initialize_ocr(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            if not PADDLEOCR_AVAILABLE:
                logger.error("‚ùå PaddleOCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paddlepaddle paddleocr")
                return
            
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é PaddleOCR...")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
            try:
                ocr_config = get_ocr_config('advertisement')
                logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OCR –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –£–ø—Ä–æ—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - —É–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                # –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –¥–æ–≤–µ—Ä—è–µ–º PaddleOCR –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
                safe_config = {
                    'lang': ocr_config.get('lang', 'ru'),
                    'use_angle_cls': True,
                }
                ocr_config = safe_config
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–ü–ï–† –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                
            except Exception as config_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OCR: {str(config_error)}")
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–ü–ï–† –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
                ocr_config = {
                    'lang': 'ru',
                    'use_angle_cls': True,
                }
            
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏
            for k in ['lang', 'use_angle_cls', 'det_db_thresh', 'det_db_box_thresh', 'det_db_unclip_ratio', 'det_limit_side_len', 'det_limit_type']:
                if k in ocr_config:
                    logger.info(f"  - {k}: {ocr_config.get(k)}")
            
            # –°–æ–∑–¥–∞–µ–º PaddleOCR —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ PaddleOCR —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
            logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {ocr_config}")
            
            try:
                self.ocr = PaddleOCR(**ocr_config)
                logger.info("‚úÖ PaddleOCR –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                logger.info("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                
            except Exception as create_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PaddleOCR –æ–±—ä–µ–∫—Ç–∞: {str(create_error)}")
                logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(create_error).__name__}")
                logger.error(f"üîç –î–µ—Ç–∞–ª–∏: {repr(create_error)}")
                
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")
                try:
                    minimal_config = {'lang': 'ru'}
                    logger.info(f"üìã –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {minimal_config}")
                    self.ocr = PaddleOCR(**minimal_config)
                    logger.info("‚úÖ PaddleOCR —Å–æ–∑–¥–∞–Ω —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
                except Exception as minimal_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {str(minimal_error)}")
                    
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    logger.info("üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
                    try:
                        basic_config = {'lang': 'ru'}
                        logger.info(f"üìã –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {basic_config}")
                        self.ocr = PaddleOCR(**basic_config)
                        logger.info("‚úÖ PaddleOCR —Å–æ–∑–¥–∞–Ω —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
                    except Exception as basic_error:
                        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - PaddleOCR –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω: {str(basic_error)}")
                        self.ocr = None
                        return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è
            if self.ocr is None:
                logger.error("‚ùå PaddleOCR –æ–±—ä–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è!")
                return
            
            logger.info("‚úÖ PaddleOCR –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º PaddleOCR...")
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
                test_image = np.ones((200, 400, 3), dtype=np.uint8) * 255
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
                cv2.putText(test_image, "TEST", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 0), 3)
                logger.info("üñºÔ∏è –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 200x400 —Å —Ç–µ–∫—Å—Ç–æ–º 'TEST'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ predict
                if not hasattr(self.ocr, 'ocr') or not callable(getattr(self.ocr, 'ocr', None)):
                    logger.error("‚ùå –£ –æ–±—ä–µ–∫—Ç–∞ PaddleOCR –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ ocr")
                    self.ocr = None
                    return
                
                logger.info("‚úÖ –ú–µ—Ç–æ–¥ ocr –Ω–∞–π–¥–µ–Ω, –¥–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤...")
                # PaddleOCR 3.x: ocr(img) –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                test_result = self.ocr.ocr(test_image)
                logger.info(f"‚úÖ PaddleOCR —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(test_result)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç
                if test_result and len(test_result) > 0 and test_result[0]:
                    logger.info(f"‚úÖ –¢–µ—Å—Ç –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç: {len(test_result[0])} –æ–±–ª–∞—Å—Ç–µ–π")
                    for i, detection in enumerate(test_result[0]):
                        if len(detection) >= 2 and len(detection[1]) >= 2:
                            text = detection[1][0]
                            conf = detection[1][1]
                            logger.info(f"  - –û–±–ª–∞—Å—Ç—å {i+1}: '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.3f})")
                else:
                    logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                
            except Exception as test_error:
                logger.error(f"‚ùå PaddleOCR —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {str(test_error)}")
                logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–∞: {type(test_error).__name__}")
                logger.error(f"üîç –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞: {repr(test_error)}")
                self.ocr = None
                return
            
            logger.info("üéâ PaddleOCR –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaddleOCR: {str(e)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            self.ocr = None
    
    async def analyze_image(self, image: np.ndarray, sensitivity: Optional[str] = None) -> Dict[str, Any]:
        """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.detect_and_analyze_text(image, sensitivity=sensitivity)
    
    async def detect_and_analyze_text(self, image: np.ndarray, sensitivity: Optional[str] = None) -> Dict[str, Any]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: detect_and_analyze_text –ù–ê–ß–ê–õ–°–Ø")
        logger.info("üöÄ === –ù–ê–ß–ê–õ–û detect_and_analyze_text ===")
        print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.shape}, {image.dtype}")
        logger.info(f"üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.shape}, {image.dtype}")
        
        if not self.ocr:
            logger.error("‚ùå PaddleOCR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {
                'has_text': False,
                'text_regions': [],
                'multiple_fonts': False,
                'confidence': 0.0,
                'text_content': '',
                'error': 'PaddleOCR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            }
        
        logger.info("‚úÖ PaddleOCR –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º OCR –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º _run_ocr_sync –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                self.executor,
                self._run_ocr_sync,
                image
            )
            logger.info(f"‚úÖ _run_ocr_sync –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç: {repr(result)}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: detect_and_analyze_text –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
            logger.info("üöÄ === –ö–û–ù–ï–¶ detect_and_analyze_text ===")
            return result
            
        except Exception as e:
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–®–ò–ë–ö–ê –≤ detect_and_analyze_text: {str(e)}")
            logger.error(f"üí• –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ PaddleOCR: {str(e)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {repr(e)}")
            logger.error("üöÄ === –ö–û–ù–ï–¶ detect_and_analyze_text (–° –û–®–ò–ë–ö–û–ô) ===")
            return {
                'has_text': False,
                'text_regions': [],
                'multiple_fonts': False,
                'confidence': 0.0,
                'text_content': '',
                'error': f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OCR: {str(e)}"
            }
    
    def _get_loose_ocr(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π OCR –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
        –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫
        –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö doc-–º–æ–¥–µ–ª–µ–π –∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–¥–µ—Ä–∂–∫–∞–º.
        """
        if not PADDLEOCR_AVAILABLE:
            return None
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π OCR
        return self.ocr

    def _create_image_variants(self, image: np.ndarray) -> List[np.ndarray]:
        """–°–æ–∑–¥–∞–Ω–∏–µ 10 —Å–∞–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if len(image.shape) == 3:
                gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            else:
                gray = image.copy()
            
            variants = []
            
            # 1. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (RGB)
            variants.append(image.copy())
            # 1b. –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∫–æ–ø–∏—è –¥–æ 1536 –ø–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (—É–ª—É—á—à–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤)
            try:
                base = image.copy()
                h0, w0 = (base.shape[:2] if len(base.shape) >= 2 else (0, 0))
                if min(h0, w0) > 0:
                    scale = 1536.0 / max(h0, w0)
                    if scale < 1.0:
                        new_w = int(w0 * scale)
                        new_h = int(h0 * scale)
                        resized_down = cv2.resize(base, (new_w, new_h), interpolation=cv2.INTER_AREA)
                        variants.append(resized_down)
            except Exception:
                pass
            
            # 2. –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
            try:
                h, w = gray.shape
                if min(h, w) < 800:
                    scale = max(4, 1000 // min(h, w))
                    if len(image.shape) == 3:
                        resized = cv2.resize(image, (w * scale, h * scale), interpolation=cv2.INTER_LANCZOS4)
                    else:
                        resized_gray = cv2.resize(gray, (w * scale, h * scale), interpolation=cv2.INTER_LANCZOS4)
                        resized = cv2.cvtColor(resized_gray, cv2.COLOR_GRAY2RGB)
                    variants.append(resized)
            except:
                pass

            # 9b. Black-hat —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞ –Ω–∞ —Ç—ë–º–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ
            try:
                kernel_bh = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
                blackhat = cv2.morphologyEx(gray, cv2.MORPH_BLACKHAT, kernel_bh)
                blackhat_rgb = cv2.cvtColor(blackhat, cv2.COLOR_GRAY2RGB)
                variants.append(blackhat_rgb)
            except:
                pass
            
            # 3. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è –æ—á–µ–Ω—å –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            try:
                h, w = gray.shape
                if min(h, w) < 400:
                    scale = max(6, 1200 // min(h, w))
                    if len(image.shape) == 3:
                        resized_extreme = cv2.resize(image, (w * scale, h * scale), interpolation=cv2.INTER_LANCZOS4)
                    else:
                        resized_gray_extreme = cv2.resize(gray, (w * scale, h * scale), interpolation=cv2.INTER_LANCZOS4)
                        resized_extreme = cv2.cvtColor(resized_gray_extreme, cv2.COLOR_GRAY2RGB)
                    variants.append(resized_extreme)
            except:
                pass
            
            # 4. –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç (—É–º–µ—Ä–µ–Ω–Ω—ã–π)
            try:
                enhanced = cv2.convertScaleAbs(gray, alpha=1.6, beta=10)
                enhanced_rgb = cv2.cvtColor(enhanced, cv2.COLOR_GRAY2RGB)
                variants.append(enhanced_rgb)
            except:
                pass
            
            # 5. CLAHE (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—è)
            try:
                clahe = cv2.createCLAHE(clipLimit=5.0, tileGridSize=(8,8))
                clahe_image = clahe.apply(gray)
                clahe_rgb = cv2.cvtColor(clahe_image, cv2.COLOR_GRAY2RGB)
                variants.append(clahe_rgb)
            except:
                pass
            
            # 6. –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            try:
                adaptive = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 21, 7)
                adaptive_rgb = cv2.cvtColor(adaptive, cv2.COLOR_GRAY2RGB)
                variants.append(adaptive_rgb)
            except:
                pass
            
            # 7. –ò–Ω–≤–µ—Ä—Å–∏—è (–¥–ª—è –±–µ–ª–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ) + –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
            try:
                inverted = cv2.bitwise_not(gray)
                inv_bin = cv2.adaptiveThreshold(inverted, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 21, 7)
                inverted_rgb = cv2.cvtColor(inv_bin, cv2.COLOR_GRAY2RGB)
                variants.append(inverted_rgb)
            except:
                pass
            
            # 8. Otsu-–±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (—É–º–µ—Ä–µ–Ω–Ω–∞—è)
            try:
                _, extreme_binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                extreme_binary_rgb = cv2.cvtColor(extreme_binary, cv2.COLOR_GRAY2RGB)
                variants.append(extreme_binary_rgb)
            except:
                pass
            
            # 9. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            try:
                combined = cv2.convertScaleAbs(gray, alpha=2.5, beta=60)
                combined = cv2.GaussianBlur(combined, (3, 3), 0)
                combined = cv2.adaptiveThreshold(combined, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 13, 3)
                combined_rgb = cv2.cvtColor(combined, cv2.COLOR_GRAY2RGB)
                variants.append(combined_rgb)
            except:
                pass
            
            # 10. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–µ–ª–∫–∏—Ö –Ω–∞–¥–ø–∏—Å–µ–π (—É–º–µ—Ä–µ–Ω–Ω–æ)
            try:
                h, w = gray.shape
                if min(h, w) < 500:
                    scale = 2
                    large_gray = cv2.resize(gray, (w * scale, h * scale), interpolation=cv2.INTER_LANCZOS4)
                    clahe = cv2.createCLAHE(clipLimit=8.0, tileGridSize=(8, 8))
                    enhanced = clahe.apply(large_gray)
                    _, binary = cv2.threshold(enhanced, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                    binary_rgb = cv2.cvtColor(binary, cv2.COLOR_GRAY2RGB)
                    variants.append(binary_rgb)
            except:
                pass

            # 11. –£—Å–∏–ª–µ–Ω–∏–µ —á—ë—Ä–Ω–æ–≥–æ —Ç–æ–Ω–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: –º–µ–¥–∏–∞–Ω–Ω—ã–π –±–ª—é—Ä + –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ + –º–æ—Ä—Ñ.–∑–∞–º—ã–∫–∞–Ω–∏–µ
            try:
                blur = cv2.medianBlur(gray, 3)
                th = cv2.adaptiveThreshold(blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 31, 5)
                kernel = np.ones((2, 2), np.uint8)
                closed = cv2.morphologyEx(th, cv2.MORPH_CLOSE, kernel, iterations=1)
                closed_rgb = cv2.cvtColor(closed, cv2.COLOR_GRAY2RGB)
                variants.append(closed_rgb)
            except:
                pass

            # 12. –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Otsu + –¥–∏–ª–∞—Ç–∞—Ü–∏—è –¥–ª—è —Ç–æ–Ω–∫–∏—Ö —á—ë—Ä–Ω—ã—Ö –±—É–∫–≤
            try:
                _, th_inv = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
                kernel = np.ones((2, 2), np.uint8)
                dil = cv2.dilate(th_inv, kernel, iterations=1)
                dil_rgb = cv2.cvtColor(dil, cv2.COLOR_GRAY2RGB)
                variants.append(dil_rgb)
            except:
                pass

            # 13. –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π (—á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å —á—ë—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
            try:
                hsv = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)
                h, s, v = cv2.split(hsv)
                # –ú–∞—Å–∫–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ (–¥–≤–µ –¥—É–≥–∏ –ø–æ –∫—Ä—É–≥—É –æ—Ç—Ç–µ–Ω–∫–æ–≤)
                lower_red1 = np.array([0, 80, 40], dtype=np.uint8)
                upper_red1 = np.array([10, 255, 255], dtype=np.uint8)
                lower_red2 = np.array([170, 80, 40], dtype=np.uint8)
                upper_red2 = np.array([180, 255, 255], dtype=np.uint8)
                mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
                mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
                red_mask = cv2.bitwise_or(mask1, mask2)
                # –ó–∞–º–µ–Ω—è–µ–º –∫—Ä–∞—Å–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ –Ω–∞ –±–µ–ª—ã–µ
                no_red = image.copy()
                no_red[red_mask > 0] = [255, 255, 255]
                variants.append(no_red)

                # –ù–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –±–µ–∑ –∫—Ä–∞—Å–Ω–æ–≥–æ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
                no_red_gray = cv2.cvtColor(no_red, cv2.COLOR_RGB2GRAY)
                nr_th = cv2.adaptiveThreshold(no_red_gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 31, 7)
                nr_th_rgb = cv2.cvtColor(nr_th, cv2.COLOR_GRAY2RGB)
                variants.append(nr_th_rgb)

                # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ no_red –¥–ª—è —Ç–æ–Ω–∫–∏—Ö –ø–æ–¥–ø–∏—Å–µ–π + CLAHE + –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (—Å–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
                try:
                    up_scale = 3
                    h0, w0 = no_red_gray.shape
                    up = cv2.resize(no_red_gray, (w0 * up_scale, h0 * up_scale), interpolation=cv2.INTER_LANCZOS4)
                    clahe = cv2.createCLAHE(clipLimit=6.0, tileGridSize=(8, 8))
                    up_enh = clahe.apply(up)
                    up_th = cv2.adaptiveThreshold(up_enh, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 41, 5)
                    up_th_rgb = cv2.cvtColor(up_th, cv2.COLOR_GRAY2RGB)
                    variants.append(up_th_rgb)
                except Exception:
                    pass
            except:
                pass

            # 14. –ú–∞—Å–∫–∞ ¬´—Ç–æ–ª—å–∫–æ —Ç—ë–º–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏¬ª + –∑–∞–∫—Ä—ã—Ç–∏–µ
            try:
                dark = (gray < 160).astype(np.uint8) * 255
                kernel = np.ones((2, 2), np.uint8)
                dark_closed = cv2.morphologyEx(dark, cv2.MORPH_CLOSE, kernel, iterations=1)
                dark_closed_rgb = cv2.cvtColor(dark_closed, cv2.COLOR_GRAY2RGB)
                variants.append(dark_closed_rgb)
            except:
                pass

            # 15. Unsharp mask –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —Ç–æ–Ω–∫–∏—Ö —à—Ç—Ä–∏—Ö–æ–≤
            try:
                blur = cv2.GaussianBlur(image, (0, 0), sigmaX=1.2)
                unsharp = cv2.addWeighted(image, 1.6, blur, -0.6, 0)
                variants.append(unsharp)
            except:
                pass
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è OCR")
            return variants
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {str(e)}")
            return [image.copy()]
    
    def _run_ocr_sync(self, image: np.ndarray) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ OCR —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: _run_ocr_sync –ù–ê–ß–ê–õ–°–Ø")
        logger.info("üöÄ === –ù–ê–ß–ê–õ–û _run_ocr_sync ===")
        try:
            print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ó–∞–ø—É—Å–∫ PaddleOCR –∞–Ω–∞–ª–∏–∑–∞...")
            logger.info("üîç –ó–∞–ø—É—Å–∫ PaddleOCR –∞–Ω–∞–ª–∏–∑–∞...")
            logger.info(f"üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.shape}")
            logger.info(f"üñºÔ∏è –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.dtype}")
            logger.info(f"üñºÔ∏è –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –ø–∏–∫—Å–µ–ª–µ–π: [{image.min()}, {image.max()}]")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            image_variants = self._create_image_variants(image)
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –°–æ–∑–¥–∞–Ω–æ {len(image_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–æ {len(image_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
            all_texts = []
            all_bboxes = []
            all_confidences = []
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: === –°–ë–û–† –¢–ï–ö–°–¢–û–í –ò–ó –í–°–ï–• –í–ê–†–ò–ê–ù–¢–û–í ===")
            
            for i, variant in enumerate(image_variants):
                try:
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç #{i+1}/{len(image_variants)}")
                    logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ OCR #{i+1}/{len(image_variants)}")
                    logger.info(f"  - –†–∞–∑–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞: {variant.shape}")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º PaddleOCR
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –≤—ã–∑—ã–≤–∞–µ–º PaddleOCR.ocr()...")
                    # PaddleOCR –æ–∂–∏–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ BGR (–∫–∞–∫ –∏–∑ cv2.imread)
                    variant_input = variant
                    try:
                        if isinstance(variant, np.ndarray) and len(variant.shape) == 3 and variant.shape[2] == 3:
                            # –Ω–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –≤ RGB ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BGR
                            variant_input = cv2.cvtColor(variant, cv2.COLOR_RGB2BGR)
                    except Exception:
                        variant_input = variant
                    # PaddleOCR 3.x: ocr(img) –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                    variant_result = self.ocr.ocr(variant_input)
                    
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: PaddleOCR –≤–µ—Ä–Ω—É–ª: {type(variant_result)}")
                    logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç PaddleOCR: {type(variant_result)}")
                    
                    # –ù–û–†–ú–ê–õ–ò–ó–£–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–î –í–°–ï –°–ò–ì–ù–ê–¢–£–†–´
                    parsed = self._normalize_ocr_result(variant_result)
                    if not parsed:
                        print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–µ—Ç")
                    for j, item in enumerate(parsed):
                        try:
                            text = str(item.get('text', '')).strip()
                            conf = float(item.get('confidence', 0.0))
                            bbox = item.get('bbox', [[0,0],[100,0],[100,100],[0,100]])
                            if text and conf > 0:
                                all_texts.append(text)
                                all_bboxes.append(bbox)
                                all_confidences.append(conf)
                                logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –¥–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.3f})")
                        except Exception as detection_error:
                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ #{j+1}: {str(detection_error)}")
                            continue
                        
                except Exception as e:
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ #{i+1}: {str(e)}")
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ #{i+1}: {str(e)}")
                    continue
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–•–û–î –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            # try:
            #     extra_texts, extra_bboxes, extra_confs = self._detect_black_text_lines(image)
            #     for txt, bb, cf in zip(extra_texts, extra_bboxes, extra_confs):
            #         all_texts.append(txt)
            #         all_bboxes.append(bb)
            #         all_confidences.append(cf)
            #     logger.info(f"‚ûï Extra pass (dark lines): –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(extra_texts)} —Å—Ç—Ä–æ–∫")
            # except Exception as extra_err:
            #     logger.warning(f"‚ö†Ô∏è Extra pass (dark lines) –æ—à–∏–±–∫–∞: {str(extra_err)}")

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è –ª—É—á—à—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            unique_texts = {}
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: === –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: all_texts: {all_texts}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: all_bboxes: {all_bboxes}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: all_confidences: {all_confidences}")
            
            for i, (text, bbox, conf) in enumerate(zip(all_texts, all_bboxes, all_confidences)):
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç #{i+1}: text='{text}', bbox={repr(bbox)}, conf={conf}")
                try:
                    if text not in unique_texts or conf > unique_texts[text]['confidence']:
                        unique_texts[text] = {'bbox': bbox, 'confidence': conf}
                        print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –î–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: '{text}' -> —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {conf:.3f}")
                except Exception as e:
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ #{i+1}: {str(e)}")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ #{i+1}: {str(e)}")
                    continue
            
            logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(unique_texts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
            for i, (text, info) in enumerate(unique_texts.items()):
                logger.info(f"  üìù –¢–µ–∫—Å—Ç #{i+1}: '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {info['confidence']:.3f})")
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç #{i+1}: '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {info['confidence']:.3f})")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
            if len(unique_texts) == 0:
                logger.info("‚ÑπÔ∏è OCR –Ω–µ –≤—ã–¥–µ–ª–∏–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
                ocr_result = []
            else:
                ocr_result = [[unique_texts[text]['bbox'], [text, unique_texts[text]['confidence']]] 
                             for text in unique_texts.keys()]
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: === –ò–¢–û–ì–û–í–´–ô –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: {len(unique_texts)}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: ocr_result —Å–æ–¥–µ—Ä–∂–∏—Ç {len(ocr_result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º)
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —ç–ª–µ–º–µ–Ω—Ç–æ–≤={len(ocr_result)}")
            text_regions = []
            all_text = []
            confidences = []
            
            for i, line in enumerate(ocr_result):
                try:
                    if isinstance(line, dict):
                        # –ù–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        text = str(line.get('text', '')).strip()
                        confidence = float(line.get('confidence', 0.0))
                        bbox = line.get('bbox', [[0, 0], [100, 0], [100, 100], [0, 100]])
                    elif isinstance(line, (list, tuple)) and len(line) >= 2:
                        bbox = line[0]
                        text_info = line[1]
                        if isinstance(text_info, (list, tuple)) and len(text_info) >= 2:
                            text = str(text_info[0])
                            confidence = float(text_info[1])
                        elif isinstance(text_info, str):
                            text = text_info
                            confidence = 1.0
                        else:
                            continue
                    else:
                        continue
                    if not text:
                        continue
                    region_info = self._analyze_text_region(image, bbox, text, confidence)
                    text_regions.append(region_info)
                    all_text.append(text)
                    confidences.append(confidence)
                except Exception as parse_err:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ #{i+1}: {str(parse_err)}")
                    continue
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            avg_confidence = np.mean(confidences) if confidences else 0.0
            text_content = ' '.join(all_text)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
            quality_config = get_text_quality_config()
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ —Ä–æ–Ω—è–µ–º—Å—è –ø—Ä–∏ –ø—É—Å—Ç—ã—Ö bbox)
            valid_regions = []
            for r in text_regions:
                try:
                    if r.get('confidence', 0) >= quality_config['min_confidence']:
                        valid_regions.append(r)
                except Exception:
                    continue
            clean_text = ''.join(c for c in text_content if c.isalnum() or c.isspace()).strip()
            
            # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê
            logger.info(f"=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê –¢–ï–ö–°–¢–ê ===")
            logger.info(f"–í—Å–µ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π: {len(text_regions)}")
            logger.info(f"–í–∞–ª–∏–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: {len(valid_regions)}")
            logger.info(f"–ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç: '{clean_text}' (–¥–ª–∏–Ω–∞: {len(clean_text)})")
            logger.info(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
            logger.info(f"–ü–æ—Ä–æ–≥–∏: min_confidence={quality_config['min_confidence']}, min_text_length={quality_config['min_text_length']}, min_avg_confidence={quality_config['min_avg_confidence']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            cond1 = len(valid_regions) >= quality_config.get('min_regions_count', 1)
            cond2 = len(clean_text) >= quality_config['min_text_length']
            cond3 = avg_confidence >= quality_config['min_avg_confidence']
            cond4 = len(text_regions) > 0  # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–ª–∞—Å—Ç–µ–π
            
            logger.info(f"–£—Å–ª–æ–≤–∏–µ 1 (–≤–∞–ª–∏–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ >= {quality_config.get('min_regions_count', 1)}): {cond1}")
            logger.info(f"–£—Å–ª–æ–≤–∏–µ 2 (–¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ >= {quality_config['min_text_length']}): {cond2}")
            logger.info(f"–£—Å–ª–æ–≤–∏–µ 3 (—Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å >= {quality_config['min_avg_confidence']}): {cond3}")
            logger.info(f"–£—Å–ª–æ–≤–∏–µ 4 (–µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞): {cond4}")
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, region in enumerate(text_regions):
                conf = region.get('confidence', 0)
                text = region.get('text', '')
                logger.info(f"–û–±–ª–∞—Å—Ç—å #{i+1}: '{text}' confidence={conf:.3f}, –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Ä–æ–≥={conf >= quality_config['min_confidence']}")
            
            # –ñ–µ—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞: –¥–æ–ª–∂–Ω—ã —Å–æ–π—Ç–∏—Å—å –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –ò –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤
            # –û–ø–∏—Ä–∞–µ–º—Å—è –Ω–∞ –∫–æ–Ω—Ñ–∏–≥ –∫–∞—á–µ—Å—Ç–≤–∞
            try:
                min_letters = int(quality_config.get('min_letters_count', 3))
            except Exception:
                min_letters = 3
            letters_count = sum(1 for c in clean_text if c.isalpha())
            has_text = cond4 and cond1 and cond2 and cond3 and letters_count >= min_letters
            
            logger.info(f"–ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ has_text = {has_text}")
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: –≤—Å–µ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π={len(text_regions)}, –≤–∞–ª–∏–¥–Ω—ã—Ö={len(valid_regions)}")
            logger.info(f"üìù –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç: '{clean_text[:50]}' (–¥–ª–∏–Ω–∞: {len(clean_text)})")
            logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: has_text={has_text} (letters={letters_count})")
            
            # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –®–†–ò–§–¢–û–í
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –®–†–ò–§–¢–û–í ===")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(text_regions)} –æ–±–ª–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            # –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            try:
                cfg = get_multiple_fonts_config(mode=sensitivity) if sensitivity else get_multiple_fonts_config()
            except Exception:
                cfg = get_multiple_fonts_config()
            multiple_fonts = self._detect_multiple_fonts_from_regions(text_regions)
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {multiple_fonts}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'has_text': has_text,
                'text_regions': text_regions,
                'multiple_fonts': multiple_fonts,
                'confidence': avg_confidence,
                'text_content': text_content,
                'regions_count': len(text_regions),
                'ocr_boxes': text_regions,
                'error': None if has_text else "OCR –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç, –Ω–æ –æ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞"
            }
            
            logger.info(f"‚úÖ PaddleOCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç: has_text={has_text}, —Ç–µ–∫—Å—Ç='{text_content[:50]}...'")
            logger.info(f"üî§ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {multiple_fonts}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: _run_ocr_sync –∑–∞–≤–µ—Ä—à–µ–Ω, has_text={has_text}, multiple_fonts={multiple_fonts}")
            logger.info("üöÄ === –ö–û–ù–ï–¶ _run_ocr_sync ===")
            return result
            
        except Exception as e:
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–®–ò–ë–ö–ê –≤ _run_ocr_sync: {str(e)}")
            logger.error(f"üí• –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _run_ocr_sync: {str(e)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {repr(e)}")
            logger.error("üöÄ === –ö–û–ù–ï–¶ _run_ocr_sync (–° –û–®–ò–ë–ö–û–ô) ===")
            raise

    def _detect_black_text_lines(self, image: np.ndarray) -> Tuple[List[str], List[List[List[int]]], List[float]]:
        """–ü–æ–∏—Å–∫ —á—ë—Ä–Ω–æ–≥–æ —Ç–æ–Ω–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: –≤—ã—Ä–µ–∑–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª–æ—Å—ã –∏ –≥–æ–Ω—è–µ–º OCR –ø–æ –∫—Ä–æ–ø–∞–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–∏ (texts, bboxes, confidences). BBox –∑–∞–¥–∞—ë–º –∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫—Ä–æ–ø–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        texts: List[str] = []
        bboxes: List[List[List[int]]] = []
        confs: List[float] = []

        # 1) –£–±–∏—Ä–∞–µ–º –∫—Ä–∞—Å–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª
        try:
            hsv = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)
            lower_red1 = np.array([0, 80, 40], dtype=np.uint8)
            upper_red1 = np.array([10, 255, 255], dtype=np.uint8)
            lower_red2 = np.array([170, 80, 40], dtype=np.uint8)
            upper_red2 = np.array([180, 255, 255], dtype=np.uint8)
            mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
            mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
            red_mask = cv2.bitwise_or(mask1, mask2)
            no_red = image.copy()
            no_red[red_mask > 0] = [255, 255, 255]
        except Exception:
            no_red = image.copy()

        gray = cv2.cvtColor(no_red, cv2.COLOR_RGB2GRAY)

        # 2) –°–∏–ª—å–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ —á—ë—Ä–Ω–æ–≥–æ
        clahe = cv2.createCLAHE(clipLimit=6.0, tileGridSize=(8, 8))
        enh = clahe.apply(gray)
        th = cv2.adaptiveThreshold(enh, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV, 41, 5)
        # –î–æ–ø. –º–∞—Å–∫–∞ K-–∫–∞–Ω–∞–ª–∞ (—Ç—ë–º–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏)
        try:
            k_channel = 255 - np.max(no_red, axis=2)
            k_channel = k_channel.astype(np.uint8)
            k_blur = cv2.GaussianBlur(k_channel, (3, 3), 0)
            k_th = cv2.adaptiveThreshold(k_blur, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 31, 5)
        except Exception:
            k_th = np.zeros_like(th)
        # –£–±–∏—Ä–∞–µ–º —à—É–º, —Å–æ–µ–¥–∏–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –≤ –ø–æ–ª–æ—Å—ã (–æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –º–∞—Å–∫–∞)
        kernel = np.ones((3, 3), np.uint8)
        closed = cv2.morphologyEx(th, cv2.MORPH_CLOSE, kernel, iterations=1)
        closed_k = cv2.morphologyEx(k_th, cv2.MORPH_CLOSE, kernel, iterations=1)
        line_mask = cv2.bitwise_or(closed, closed_k)
        # –£—Å–∏–ª–∏–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏
        try:
            h_kernel = np.ones((1, 9), np.uint8)
            line_mask = cv2.dilate(line_mask, h_kernel, iterations=1)
        except Exception:
            pass

        # 3) –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª–æ—Å
        proj = np.sum(line_mask > 0, axis=1)
        h, w = closed.shape
        line_threshold = max(8, int(0.015 * w))
        bands: List[Tuple[int, int]] = []
        in_band = False
        band_start = 0
        for y in range(h):
            if proj[y] >= line_threshold and not in_band:
                in_band = True
                band_start = y
            elif proj[y] < line_threshold and in_band:
                in_band = False
                bands.append((band_start, y))
        if in_band:
            bands.append((band_start, h - 1))

        # 4) –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ª–æ—Å—ã –ø–æ–ª—É—á–∞–µ–º –∫—Ä–æ–ø, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏ –ø—Ä–æ–≥–æ–Ω—è–µ–º OCR
        for (y1, y2) in bands:
            # –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç —Å–ª–∏—à–∫–æ–º —Ç–æ–Ω–∫–∏—Ö –ø–æ–ª–æ—Å
            if y2 - y1 < 10:
                continue
            pad = 4
            y1p = max(0, y1 - pad)
            y2p = min(h - 1, y2 + pad)
            crop_rgb = no_red[y1p:y2p, :, :]
            if crop_rgb.size == 0:
                continue
            # upscale
            scale = 4
            crop_up = cv2.resize(crop_rgb, (crop_rgb.shape[1] * scale, crop_rgb.shape[0] * scale), interpolation=cv2.INTER_LANCZOS4)
            # OCR (BGR)
            try:
                # –î–æ–ø. –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞: L-–∫–∞–Ω–∞–ª LAB + –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (–∏–Ω–≤–µ—Ä—Ç.)
                try:
                    lab = cv2.cvtColor(crop_up, cv2.COLOR_RGB2LAB)
                    l = lab[:, :, 0]
                    clahe2 = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
                    l_enh = clahe2.apply(l)
                    l_th = cv2.adaptiveThreshold(l_enh, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 31, 5)
                    crop_pre = cv2.cvtColor(l_th, cv2.COLOR_GRAY2RGB)
                except Exception:
                    crop_pre = crop_up

                crop_bgr = cv2.cvtColor(crop_pre, cv2.COLOR_RGB2BGR)
                ocr_engine = self._get_loose_ocr() or self.ocr
                ocr_res = ocr_engine.ocr(crop_bgr)
                parsed = self._normalize_ocr_result(ocr_res)
                # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º bbox –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫—Ä–æ–ø–∞ (–ø–æ—Å–ª–µ –∞–ø—Å–∫–µ–π–ª–∞) –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for item in parsed:
                    text = str(item.get('text', '')).strip()
                    conf = float(item.get('confidence', 0.0))
                    raw_bbox = item.get('bbox')
                    try:
                        transformed_bbox = []
                        if isinstance(raw_bbox, (list, tuple)) and len(raw_bbox) >= 4 and isinstance(raw_bbox[0], (list, tuple)):
                            for pt in raw_bbox:
                                x = int(pt[0] / float(scale))
                                y = int(pt[1] / float(scale)) + int(y1p)
                                transformed_bbox.append([x, y])
                        else:
                            # –∞–≤–∞—Ä–∏–π–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–æ—Å—ã
                            transformed_bbox = [[0, y1p], [w - 1, y1p], [w - 1, y2p], [0, y2p]]
                    except Exception:
                        transformed_bbox = [[0, y1p], [w - 1, y1p], [w - 1, y2p], [0, y2p]]

                    # –§–∏–ª—å—Ç—Ä: –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ + –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–æ–∫–µ–Ω—ã
                    has_cyr = any(1040 <= ord(c) <= 1103 for c in text)
                    if text and len(text) >= 3 and has_cyr and conf >= 0.45:
                        texts.append(text)
                        bboxes.append(transformed_bbox)
                        confs.append(conf)
            except Exception:
                continue

        return texts, bboxes, confs

    def _normalize_ocr_result(self, raw: Any) -> List[Dict[str, Any]]:
        """–ü—Ä–∏–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç PaddleOCR (2.x/3.x, —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã) –∫ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: { bbox: [...], text: str, confidence: float }
        """
        try:
            if raw is None:
                return []
            # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç 3.x: —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü; –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é
            if isinstance(raw, list) and len(raw) > 0:
                first = raw[0]
                # –§–æ—Ä–º–∞—Ç 2.x: —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π [[[x,y]x4], (text, score)]
                if isinstance(first, list):
                    normalized: List[Dict[str, Any]] = []
                    for det in first:
                        try:
                            if not isinstance(det, (list, tuple)) or len(det) < 2:
                                continue
                            bbox = det[0]
                            text_info = det[1]
                            if isinstance(text_info, (list, tuple)) and len(text_info) >= 2:
                                text = str(text_info[0])
                                conf = float(text_info[1])
                            elif isinstance(text_info, str):
                                text = text_info
                                conf = 1.0
                            else:
                                continue
                            normalized.append({'bbox': bbox, 'text': text, 'confidence': conf})
                        except Exception:
                            continue
                    return normalized
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: dict —Å –∫–ª—é—á–∞–º–∏ rec_texts/rec_scores/dt_polys
                if isinstance(first, dict):
                    rec_texts = first.get('rec_texts', [])
                    rec_scores = first.get('rec_scores', [])
                    dt_polys = first.get('dt_polys', [])
                    out: List[Dict[str, Any]] = []
                    for i, text in enumerate(rec_texts):
                        try:
                            conf = float(rec_scores[i]) if i < len(rec_scores) else 0.0
                            bbox = dt_polys[i] if i < len(dt_polys) else [[0,0],[100,0],[100,100],[0,100]]
                            # –ü—Ä–∏–≤–æ–¥–∏–º bbox –∫ —Å–ø–∏—Å–∫—É —Å–ø–∏—Å–∫–æ–≤, –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª numpy
                            try:
                                import numpy as _np
                                if isinstance(bbox, _np.ndarray):
                                    bbox = bbox.tolist()
                            except Exception:
                                pass
                            out.append({'bbox': bbox, 'text': str(text), 'confidence': conf})
                        except Exception:
                            continue
                    return out
            return []
        except Exception:
            return []
    
    def _analyze_text_region(self, image: np.ndarray, bbox: List, text: str, confidence: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            try:
                logger.info(f"üîç –ü–∞—Ä—Å–∏–º bbox: {repr(bbox)}, —Ç–∏–ø: {type(bbox)}")
                
                if isinstance(bbox, (list, tuple)) and len(bbox) > 0:
                    # –ù–û–í–´–ô –§–û–†–ú–ê–¢: bbox –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    if isinstance(bbox[0], (list, tuple)):
                        # –§–æ—Ä–º–∞—Ç: [[x1,y1], [x2,y2], [x3,y3], [x4,y4]]
                        points = np.array(bbox, dtype=np.float32)
                        x_min = int(np.min(points[:, 0]))
                        y_min = int(np.min(points[:, 1]))
                        x_max = int(np.max(points[:, 0]))
                        y_max = int(np.max(points[:, 1]))
                        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ bbox: [[x,y], [x,y], [x,y], [x,y]] -> x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    elif len(bbox) >= 4:
                        # –§–æ—Ä–º–∞—Ç: [x1, y1, x2, y2] –∏–ª–∏ [x1, y1, x2, y2, ...]
                        coords = [float(coord) for coord in bbox[:4]]
                        x_min, y_min, x_max, y_max = map(int, coords)
                        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ bbox: [x1, y1, x2, y2] -> x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    elif len(bbox) == 2:
                        # –§–æ—Ä–º–∞—Ç: [x, y] - –æ–¥–Ω–∞ —Ç–æ—á–∫–∞, —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ –Ω–µ—ë
                        x_min = int(float(bbox[0])) - 10
                        y_min = int(float(bbox[1])) - 10
                        x_max = int(float(bbox[0])) + 10
                        y_max = int(float(bbox[1])) + 10
                        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ bbox: [x, y] -> —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    else:
                        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        x_min, y_min, x_max, y_max = 0, 0, 100, 100
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç bbox {bbox}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                else:
                    # bbox –ø—É—Å—Ç–æ–π –∏–ª–∏ None, —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    x_min, y_min, x_max, y_max = 0, 0, 100, 100
                    logger.warning(f"‚ö†Ô∏è bbox –ø—É—Å—Ç–æ–π –∏–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if x_min >= x_max or y_min >= y_max:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    if x_min >= x_max:
                        x_min, x_max = min(x_min, x_max), max(x_min, x_max)
                        if x_min == x_max:
                            x_max = x_min + 100
                    if y_min >= y_max:
                        y_min, y_max = min(y_min, y_max), max(y_min, y_max)
                        if y_min == y_max:
                            y_max = y_min + 100
                    logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    
            except (ValueError, TypeError, IndexError) as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bbox {bbox}: {str(e)}")
                logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                logger.error(f"üîç –î–µ—Ç–∞–ª–∏: {repr(e)}")
                # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–º–µ—Å—Ç–æ –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π
                x_min, y_min, x_max, y_max = 0, 0, 100, 100
                logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            region = image[y_min:y_max, x_min:x_max]
            
            if region.size == 0:
                return {
                    'bbox': bbox,
                    'text': text,
                    'confidence': confidence,
                    'width': 0,
                    'height': 0,
                    'area': 0,
                    'font_size_estimate': 0,
                    'region': region,
                    'x_min': x_min,
                    'y_min': y_min,
                    'x_max': x_max,
                    'y_max': y_max
                }
            
            # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±–ª–∞—Å—Ç–∏
            width = x_max - x_min
            height = y_max - y_min
            area = width * height
            font_size_estimate = height * 0.7
            
            return {
                'bbox': bbox,
                'text': text,
                'confidence': confidence,
                'width': width,
                'height': height,
                'area': area,
                'font_size_estimate': font_size_estimate,
                'region': region,
                'x_min': x_min,
                'y_min': y_min,
                'x_max': x_max,
                'y_max': y_max
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return {
                'bbox': bbox,
                'text': text,
                'confidence': confidence,
                'width': 0,
                'height': 0,
                'area': 0,
                'font_size_estimate': 0,
                'x_min': 0,
                'y_min': 0,
                'x_max': 0,
                'y_max': 0
            }
    
    def _detect_multiple_fonts_from_regions(self, text_regions: List[Dict]) -> bool:
        """–†–æ–±–∞—Å—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤. –ú–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫ —à—É–º—É."""
        try:
            logger.info("=== –ê–ù–ê–õ–ò–ó –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –®–†–ò–§–¢–û–í (ROBUST) ===")
            logger.info(f"–í—Å–µ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(text_regions)}")

            if len(text_regions) < 2:
                logger.info("–û–±–ª–∞—Å—Ç–µ–π < 2 ‚Äî —Å—á–∏—Ç–∞–µ–º –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç")
                return False

            cfg = get_multiple_fonts_config()

            # 0) –ñ—ë—Å—Ç–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–æ–≤
            filtered: List[Dict[str, Any]] = []
            for r in text_regions:
                txt = str(r.get('text', '')).strip()
                conf = float(r.get('confidence', 0.0))
                h = float(r.get('height', 0) or 0)
                w = float(r.get('width', 0) or 0)
                if len(txt) >= 2 and conf >= 0.7 and h > 8 and w > 8:
                    filtered.append(r)
            logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(filtered)}")
            if len(filtered) < max(5, int(cfg.get('min_regions_count', 4))):
                logger.info("–î–∞–Ω–Ω—ã—Ö –º–∞–ª–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç")
                return False

            # –£–¥–∞–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –ø–æ —à–∏—Ä–∏–Ω–µ/–ø–ª–æ—â–∞–¥–∏ (—á–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π)
            try:
                widths = [float(r.get('width', 0)) for r in filtered if float(r.get('width', 0)) > 0]
                areas_for_outliers = [float(r.get('area', 0)) for r in filtered if float(r.get('area', 0)) > 0]
                if widths:
                    w_med = float(np.median(np.array(widths, dtype=float)))
                    filtered = [r for r in filtered if float(r.get('width', 0) or 0) <= 2.2 * w_med]
                if areas_for_outliers:
                    a_med = float(np.median(np.array(areas_for_outliers, dtype=float)))
                    filtered = [r for r in filtered if float(r.get('area', 0) or 0) <= 3.0 * a_med]
                logger.info(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞—É—Ç–ª–∞–µ—Ä–æ–≤ –ø–æ —à–∏—Ä–∏–Ω–µ/–ø–ª–æ—â–∞–¥–∏: {len(filtered)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
                if len(filtered) < 5:
                    return False
            except Exception:
                pass

            heights = [float(r.get('height', 0)) for r in filtered if float(r.get('height', 0)) > 8]
            if len(heights) < 2:
                return False

            heights_arr = np.array(heights, dtype=float)
            median_h = float(np.median(heights_arr))
            if median_h <= 0:
                return False

            # –†–∞–Ω–Ω–∏–π ¬´–æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç¬ª: ‚â•70% –≤—ã—Å–æ—Ç –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ ¬±30% –æ—Ç –º–µ–¥–∏–∞–Ω—ã
            in_band = np.logical_and(heights_arr >= 0.7 * median_h, heights_arr <= 1.3 * median_h)
            frac_in_band = float(np.sum(in_band)) / float(len(heights_arr))
            logger.info(f"–î–æ–ª—è –≤—ã—Å–æ—Ç –≤ [0.7..1.3] –æ—Ç –º–µ–¥–∏–∞–Ω—ã: {frac_in_band:.2f}")
            likely_one_font = frac_in_band >= float(cfg.get('in_band_frac', 0.75))

            # –†–æ–±–∞—Å—Ç–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (MAD)
            mad = float(np.median(np.abs(heights_arr - median_h)) + 1e-6)
            robust_std = 1.4826 * mad
            height_variation = robust_std / median_h
            logger.info(f"Robust variation = {height_variation:.3f}")

            # –£—Å–ª–æ–≤–∏–µ: –±–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            if height_variation > max(0.7, float(cfg.get('size_variation_threshold', 0.4)) + 0.3):
                logger.info("‚úÖ –û—á–µ–Ω—å –±–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –≤—ã—Å–æ—Ç ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")
                return True

            # –ü—Ä–æ—Å—Ç–∞—è –¥–≤—É—Ö–∫–ª–∞—Å—Ç–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—ã—Å–æ—Ç–µ (–ø–æ—Ä–æ–≥ 2.0x –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ >=3 –≤ –∫–∞–∂–¥–æ–º)
            h_min = float(np.min(heights_arr))
            h_max = float(np.max(heights_arr))
            ratio = h_max / h_min if h_min > 0 else 1.0
            logger.info(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—ã—Å–æ—Ç max/min: {ratio:.2f}")
            if ratio > float(cfg.get('height_ratio_threshold', 2.0)):
                # –û—Ü–µ–Ω–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–æ—Ä–æ–≥–∏ –æ—Ç –º–µ–¥–∏–∞–Ω—ã
                small = heights_arr <= 0.85 * median_h
                large = heights_arr >= 1.15 * median_h
                small_n = int(np.sum(small))
                large_n = int(np.sum(large))
                min_per_cluster = int(cfg.get('min_regions_per_cluster', 3))
                if small_n >= min_per_cluster and large_n >= min_per_cluster:
                    logger.info("‚úÖ –î–≤–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞ –ø–æ –≤—ã—Å–æ—Ç–µ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
                    # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ä–∞–∑–ª–∏—á–∏–µ –ø–æ —è—Ä–∫–æ—Å—Ç–∏/–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —à—Ç—Ä–∏—Ö–æ–≤ –º–µ–∂–¥—É –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
                    def _cluster_metrics(mask: np.ndarray) -> Tuple[float, float, float]:
                        L_vals = []
                        densities = []
                        sats = []
                        for idx, rr in enumerate(filtered):
                            if not mask[idx]:
                                continue
                            region_img = rr.get('region', None)
                            try:
                                if region_img is None or getattr(region_img, 'size', 0) == 0:
                                    continue
                                lab = cv2.cvtColor(region_img, cv2.COLOR_RGB2LAB)
                                L = float(np.mean(lab[:, :, 0]))
                                L_vals.append(L)
                                # –û—Ü–µ–Ω–∫–∞ ¬´—Ç–æ–ª—â–∏–Ω—ã¬ª: –¥–æ–ª—è —Ç—ë–º–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
                                gray = cv2.cvtColor(region_img, cv2.COLOR_RGB2GRAY)
                                _, bin_inv = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
                                density = float(np.mean(bin_inv == 255))
                                densities.append(density)
                                # –û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞ (–æ—Ç–ª–∏—á–∞–µ—Ç —á—ë—Ä–Ω—ã–π –æ—Ç —è—Ä–∫–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
                                hsv = cv2.cvtColor(region_img, cv2.COLOR_RGB2HSV)
                                S = float(np.mean(hsv[:, :, 1]))
                                sats.append(S)
                            except Exception:
                                continue
                        L_mean = float(np.mean(L_vals)) if L_vals else 0.0
                        d_mean = float(np.mean(densities)) if densities else 0.0
                        s_mean = float(np.mean(sats)) if sats else 0.0
                        return L_mean, d_mean, s_mean

                    # –°–æ–±–∏—Ä–∞–µ–º –º–∞—Å–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ–¥ small/large –Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
                    # heights_arr —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç filtered –ø–æ –ø–æ—Ä—è–¥–∫—É
                    small_mask = small
                    large_mask = large
                    L_small, D_small, S_small = _cluster_metrics(small_mask)
                    L_large, D_large, S_large = _cluster_metrics(large_mask)
                    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: L_diff={abs(L_large - L_small):.1f}, D_diff={abs(D_large - D_small):.2f}, S_diff={abs(S_large - S_small):.1f}")
                    met_diff = 0
                    if abs(S_large - S_small) >= float(cfg.get('saturation_diff_threshold', 20.0)):
                        met_diff += 1
                    if abs(D_large - D_small) >= float(cfg.get('density_diff_threshold', 0.12)):
                        met_diff += 1
                    if abs(L_large - L_small) >= float(cfg.get('brightness_diff_threshold', 12.0)):
                        met_diff += 1
                    if met_diff >= int(cfg.get('require_metric_count', 2)):
                        logger.info("‚úÖ –ö–ª–∞—Å—Ç–µ—Ä—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –ø–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º—É —á–∏—Å–ª—É –º–µ—Ç—Ä–∏–∫ ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")
                        return True

            # –ü–ª–æ—â–∞–¥–∏ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥)
            areas = [float(r.get('area', 0)) for r in filtered if float(r.get('area', 0)) > 100]
            if len(areas) >= 2:
                areas_arr = np.array(areas, dtype=float)
                a_ratio = float(np.max(areas_arr)) / float(np.min(areas_arr)) if float(np.min(areas_arr)) > 0 else 1.0
                logger.info(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π max/min: {a_ratio:.2f}")
                if a_ratio > float(cfg.get('area_ratio_threshold', 3.5)):
                    logger.info("‚úÖ –û—á–µ–Ω—å —Ä–∞–∑–Ω—ã–µ –ø–ª–æ—â–∞–¥–∏ ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")
                    return True

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–µ –≤—ã—Å–æ—Ç—ã/–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
            try:
                from collections import defaultdict
                groups_h: Dict[str, List[float]] = defaultdict(list)
                groups_d: Dict[str, List[float]] = defaultdict(list)
                for r in filtered:
                    txt = str(r.get('text', '')).strip()
                    if not txt:
                        continue
                    h = float(r.get('height', 0) or 0)
                    region_img = r.get('region', None)
                    dens = 0.0
                    try:
                        if region_img is not None and getattr(region_img, 'size', 0) > 0:
                            gray = cv2.cvtColor(region_img, cv2.COLOR_RGB2GRAY)
                            _, bin_inv = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
                            dens = float(np.mean(bin_inv == 255))
                    except Exception:
                        pass
                    if h > 8:
                        groups_h[txt].append(h)
                        groups_d[txt].append(dens)
                if len(groups_h) >= 2:
                    # –ë–µ—Ä—ë–º –¥–≤–µ —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (–æ–±—ã—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫)
                    items = sorted(groups_h.items(), key=lambda kv: len(kv[1]), reverse=True)
                    a_txt, a_vals = items[0][0], items[0][1]
                    b_txt, b_vals = items[1][0], items[1][1]
                    a_h, b_h = float(np.median(a_vals)), float(np.median(b_vals))
                    a_d = float(np.median(groups_d.get(a_txt, [0.0])))
                    b_d = float(np.median(groups_d.get(b_txt, [0.0])))
                    h_ratio = max(a_h, b_h) / max(1.0, min(a_h, b_h))
                    d_diff = abs(a_d - b_d)
                    logger.info(f"–ì—Ä—É–ø–ø—ã '{a_txt[:12]}...' vs '{b_txt[:12]}...': h_ratio={h_ratio:.2f}, d_diff={d_diff:.2f}")
                    if h_ratio >= float(cfg.get('height_ratio_threshold', 2.0)) or d_diff >= float(cfg.get('density_diff_threshold', 0.12)):
                        logger.info("‚úÖ –†–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É —Å–∞–º—ã–º–∏ —á–∞—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ ‚Äî –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")
                        return True
            except Exception:
                pass

            if likely_one_font:
                logger.info("‚ÑπÔ∏è –ü—Ä–∏–∑–Ω–∞–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–ª–∞—Å—Ç–µ—Ä ‚Äî –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç")
                return False
            logger.info("‚ùå –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç")
            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {str(e)}")
            return False
    
    def _cluster_font_sizes(self, sizes: List[float], threshold: float = 0.3) -> List[List[float]]:
        """–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø"""
        if len(sizes) < 2:
            return [sizes]
        
        sorted_sizes = sorted(sizes)
        clusters = []
        current_cluster = [sorted_sizes[0]]
        
        for size in sorted_sizes[1:]:
            # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –±–ª–∏–∑–æ–∫ –∫ —Å—Ä–µ–¥–Ω–µ–º—É —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–≥–æ
            cluster_mean = np.mean(current_cluster)
            relative_diff = abs(size - cluster_mean) / cluster_mean
            
            if relative_diff <= threshold:
                current_cluster.append(size)
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä
                clusters.append(current_cluster)
                current_cluster = [size]
        
        clusters.append(current_cluster)
        return clusters
    
    def _analyze_text_content_for_fonts(self, text_regions: List[Dict]) -> bool:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤"""
        try:
            texts = [region.get('text', '') for region in text_regions]
            texts = [text.strip() for text in texts if text and text.strip()]
            
            if len(texts) < 2:
                return False
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞
            has_uppercase = any(text.isupper() for text in texts)
            has_lowercase = any(text.islower() for text in texts)
            has_mixed_case = any(text[0].isupper() and any(c.islower() for c in text[1:]) for text in texts if len(text) > 1)
            has_numbers = any(any(c.isdigit() for c in text) for text in texts)
            
            # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω —Å–ª–æ–≤
            word_lengths = []
            for text in texts:
                words = text.split()
                if words:
                    avg_word_len = sum(len(word) for word in words) / len(words)
                    word_lengths.append(avg_word_len)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Å—Ç–∏–ª—è—Ö –∏–ª–∏ –¥–ª–∏–Ω–∞—Ö —Å–ª–æ–≤
            style_variety_score = sum([has_uppercase, has_lowercase, has_mixed_case, has_numbers])
            
            if style_variety_score >= 3:  # –ú–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞: uppercase={has_uppercase}, lowercase={has_lowercase}, mixed={has_mixed_case}, numbers={has_numbers}")
                return True
            
            if len(word_lengths) >= 2:
                word_len_variation = np.std(word_lengths) / np.mean(word_lengths) if np.mean(word_lengths) > 0 else 0
                if word_len_variation > 0.5:  # –ë–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –≤ –¥–ª–∏–Ω–∞—Ö —Å–ª–æ–≤
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–æ–ª—å—à–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –≤ –¥–ª–∏–Ω–∞—Ö —Å–ª–æ–≤: {word_len_variation:.3f}")
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {str(e)}")
            return False
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PaddleOCR"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            library_available = PADDLEOCR_AVAILABLE
            object_created = self.ocr is not None
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –µ—Å—Ç—å, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            object_working = False
            if object_created:
                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ ocr
                    object_working = hasattr(self.ocr, 'ocr') and callable(getattr(self.ocr, 'ocr', None))
                except Exception as check_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞: {str(check_error)}")
                    object_working = False
            
            available = library_available and object_created and object_working
            
            logger.info(f"üîç PaddleOCR –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
            logger.info(f"  - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {library_available}")
            logger.info(f"  - –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {object_created}")
            logger.info(f"  - –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—á–∏–π: {object_working}")
            logger.info(f"  - –ò–¢–û–ì–û –¥–æ—Å—Ç—É–ø–µ–Ω: {available}")
            
            if not available:
                if not library_available:
                    logger.error("‚ùå PaddleOCR –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                elif not object_created:
                    logger.error("‚ùå PaddleOCR –æ–±—ä–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                elif not object_working:
                    logger.error("‚ùå PaddleOCR –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return available
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PaddleOCR: {str(e)}")
            return False
    
    def reinitialize(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR"""
        try:
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR...")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—ä–µ–∫—Ç
            if self.ocr:
                logger.info("üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—ä–µ–∫—Ç PaddleOCR...")
                self.ocr = None
            
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            self._initialize_ocr()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            is_available = self.is_available()
            
            if is_available:
                logger.info("‚úÖ PaddleOCR —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.error("‚ùå PaddleOCR –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            
            return is_available
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaddleOCR: {str(e)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return False
