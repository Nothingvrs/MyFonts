"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PaddleOCR - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
"""

import logging
import numpy as np
import cv2
from typing import List, Tuple, Optional, Dict, Any
from pathlib import Path
import asyncio
from concurrent.futures import ThreadPoolExecutor

try:
    from paddleocr import PaddleOCR
    PADDLEOCR_AVAILABLE = True
except ImportError as e:
    PADDLEOCR_AVAILABLE = False
    PaddleOCR = None

logger = logging.getLogger(__name__)

# –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞
if PADDLEOCR_AVAILABLE:
    logger.info("‚úÖ PaddleOCR —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
else:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PaddleOCR: {str(e)}")
    logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paddlepaddle paddleocr")


class PaddleOCRService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é PaddleOCR"""
    
    def __init__(self):
        self.ocr = None
        self.executor = ThreadPoolExecutor(max_workers=1)
        self._initialize_ocr()
    
    def _initialize_ocr(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PaddleOCR...")
            logger.info(f"  - PADDLEOCR_AVAILABLE: {PADDLEOCR_AVAILABLE}")
            
            if not PADDLEOCR_AVAILABLE:
                logger.error("‚ùå PaddleOCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paddlepaddle paddleocr")
                return
            
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR...")
            logger.info("  - –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)")
            logger.info("  - –ê–ì–†–ï–°–°–ò–í–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞")
            logger.info("  - det_db_thresh: 0.1 (–æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π)")
            logger.info("  - det_db_box_thresh: 0.2 (–Ω–∏–∑–∫–∏–π)")
            logger.info("  - det_db_unclip_ratio: 3.0 (–±–æ–ª—å—à–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PaddleOCR —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
            self.ocr = PaddleOCR(
                lang='ru',               # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–≤–∫–ª—é—á–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
                use_angle_cls=True,      # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–∂–µ —Å–ª–∞–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                det_db_thresh=0.1,       # –û–ß–ï–ù–¨ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.3)
                det_db_box_thresh=0.2,   # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è bounding box (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5)
                det_db_unclip_ratio=3.0, # –ë–æ–ª—å—à–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.6)
                rec_batch_num=16,        # –ë–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                max_text_length=200      # –ë–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
            )
            
            logger.info("‚úÖ PaddleOCR —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info(f"  - –û–±—ä–µ–∫—Ç OCR: {self.ocr}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º PaddleOCR –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            try:
                logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º PaddleOCR...")
                test_image = np.ones((100, 300, 3), dtype=np.uint8) * 255  # –ë–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                test_result = self.ocr.ocr(test_image)
                logger.info(f"‚úÖ –¢–µ—Å—Ç PaddleOCR: {type(test_result)}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_result}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
                logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º PaddleOCR –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–µ...")
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º (—á–µ—Ä–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ)
                test_text_image = np.ones((200, 400, 3), dtype=np.uint8) * 255
                # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ —Ç–µ–∫—Å—Ç
                cv2.rectangle(test_text_image, (50, 50), (350, 80), (0, 0, 0), -1)  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                cv2.rectangle(test_text_image, (50, 100), (300, 130), (0, 0, 0), -1)  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
                cv2.rectangle(test_text_image, (50, 150), (250, 180), (0, 0, 0), -1)  # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞
                
                test_text_result = self.ocr.ocr(test_text_image)
                logger.info(f"‚úÖ –¢–µ—Å—Ç PaddleOCR –Ω–∞ —Ç–µ–∫—Å—Ç–µ: {type(test_text_result)}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test_text_result}")
                
            except Exception as test_error:
                logger.error(f"‚ùå –¢–µ—Å—Ç PaddleOCR –Ω–µ –ø—Ä–æ—à–µ–ª: {str(test_error)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaddleOCR: {str(e)}")
            logger.error(f"  - –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"  - –î–µ—Ç–∞–ª–∏: {str(e)}")
            self.ocr = None
    
    async def analyze_image(self, image: np.ndarray) -> Dict[str, Any]:
        """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.detect_and_analyze_text(image)
    
    async def detect_and_analyze_text(self, image: np.ndarray) -> Dict[str, Any]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—Å—Ç–µ:
            - has_text: bool - –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç
            - text_regions: List - –æ–±–ª–∞—Å—Ç–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
            - multiple_fonts: bool - –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            - confidence: float - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏
            - text_content: str - —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not self.ocr:
            logger.error("PaddleOCR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {
                'has_text': False,
                'text_regions': [],
                'multiple_fonts': False,
                'confidence': 0.0,
                'text_content': '',
                'error': 'PaddleOCR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            }
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º OCR –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                self.executor,
                self._run_ocr_sync,
                image
            )
            
            return result
            
        except Exception as e:
            logger.error(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ PaddleOCR: {str(e)}")
            return {
                'has_text': False,
                'text_regions': [],
                'multiple_fonts': False,
                'confidence': 0.0,
                'text_content': '',
                'error': f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OCR: {str(e)}"
            }
    
    def _create_image_variants(self, image: np.ndarray) -> List[np.ndarray]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if len(image.shape) == 3:
                gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            else:
                gray = image.copy()
            
            variants = []
            
            # 1. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            variants.append(image.copy())
            
            # 2. –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
            try:
                h, w = gray.shape
                if min(h, w) < 400:
                    scale = max(2, 400 // min(h, w))
                    if len(image.shape) == 3:
                        resized = cv2.resize(image, (w * scale, h * scale), interpolation=cv2.INTER_CUBIC)
                    else:
                        resized_gray = cv2.resize(gray, (w * scale, h * scale), interpolation=cv2.INTER_CUBIC)
                        resized = cv2.cvtColor(resized_gray, cv2.COLOR_GRAY2RGB)
                    variants.append(resized)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if min(h, w) < 200:
                    scale = max(4, 600 // min(h, w))
                    if len(image.shape) == 3:
                        resized_large = cv2.resize(image, (w * scale, h * scale), interpolation=cv2.INTER_CUBIC)
                    else:
                        resized_gray_large = cv2.resize(gray, (w * scale, h * scale), interpolation=cv2.INTER_CUBIC)
                        resized_large = cv2.cvtColor(resized_gray_large, cv2.COLOR_GRAY2RGB)
                    variants.append(resized_large)
            except:
                pass
            
            # 3. –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            try:
                enhanced = cv2.convertScaleAbs(gray, alpha=2.0, beta=30)
                enhanced_rgb = cv2.cvtColor(enhanced, cv2.COLOR_GRAY2RGB)
                variants.append(enhanced_rgb)
            except:
                pass
            
            # 4. CLAHE (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—è)
            try:
                clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
                clahe_image = clahe.apply(gray)
                clahe_rgb = cv2.cvtColor(clahe_image, cv2.COLOR_GRAY2RGB)
                variants.append(clahe_rgb)
            except:
                pass
            
            # 5. –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
            try:
                adaptive = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
                adaptive_rgb = cv2.cvtColor(adaptive, cv2.COLOR_GRAY2RGB)
                variants.append(adaptive_rgb)
            except:
                pass
            
            # 6. –ò–Ω–≤–µ—Ä—Å–∏—è (–¥–ª—è –±–µ–ª–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ)
            try:
                inverted = cv2.bitwise_not(gray)
                inverted_rgb = cv2.cvtColor(inverted, cv2.COLOR_GRAY2RGB)
                variants.append(inverted_rgb)
            except:
                pass
            
            # 7. –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
            try:
                kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 1))
                morphed = cv2.morphologyEx(gray, cv2.MORPH_CLOSE, kernel)
                morphed_rgb = cv2.cvtColor(morphed, cv2.COLOR_GRAY2RGB)
                variants.append(morphed_rgb)
            except:
                pass
            
            # 8. –õ–µ–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏
            try:
                blurred = cv2.GaussianBlur(gray, (3, 3), 0)
                blurred_rgb = cv2.cvtColor(blurred, cv2.COLOR_GRAY2RGB)
                variants.append(blurred_rgb)
            except:
                pass
            
            # 9. –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å
            try:
                brightened = cv2.convertScaleAbs(gray, alpha=1.5, beta=50)
                brightened_rgb = cv2.cvtColor(brightened, cv2.COLOR_GRAY2RGB)
                variants.append(brightened_rgb)
            except:
                pass
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è OCR:")
            for i, variant in enumerate(variants):
                logger.info(f"  - –í–∞—Ä–∏–∞–Ω—Ç {i+1}: {variant.shape}")
            return variants
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {str(e)}")
            return [image.copy()]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã –æ—Ä–∏–≥–∏–Ω–∞–ª
    
    def _run_ocr_sync(self, image: np.ndarray) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ OCR"""
        try:
            logger.info("üîç –ó–∞–ø—É—Å–∫ PaddleOCR –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            logger.info(f"üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.shape}")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫
            image_variants = self._create_image_variants(image)
            logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–æ {len(image_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            ocr_result = None
            best_result = None
            best_confidence = 0.0
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, variant in enumerate(image_variants):
                try:
                    logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ OCR #{i+1}/{len(image_variants)}")
                    logger.info(f"  - –†–∞–∑–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞: {variant.shape}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –≤—ã–∑–æ–≤–∞
                    logger.info(f"  - –í—ã–∑—ã–≤–∞–µ–º self.ocr.ocr() –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant.shape}")
                    variant_result = self.ocr.ocr(variant)
                    logger.info(f"  - OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(variant_result)}")
                    
                    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if variant_result is None:
                        logger.info(f"    - OCR –≤–µ—Ä–Ω—É–ª None")
                    elif len(variant_result) == 0:
                        logger.info(f"    - OCR –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                    else:
                        logger.info(f"    - OCR –≤–µ—Ä–Ω—É–ª {len(variant_result)} —Å—Ç—Ä–∞–Ω–∏—Ü")
                        for page_idx, page in enumerate(variant_result):
                            if page is None:
                                logger.info(f"      - –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_idx}: None")
                            elif len(page) == 0:
                                logger.info(f"      - –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_idx}: –ø—É—Å—Ç–∞—è")
                            else:
                                logger.info(f"      - –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_idx}: {len(page)} —Å—Ç—Ä–æ–∫")
                                for line_idx, line in enumerate(page[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏
                                    if line and len(line) >= 2:
                                        text = line[1][0] if isinstance(line[1], (list, tuple)) and len(line[1]) > 0 else str(line[1])
                                        conf = line[1][1] if isinstance(line[1], (list, tuple)) and len(line[1]) > 1 else 1.0
                                        logger.info(f"        - –°—Ç—Ä–æ–∫–∞ {line_idx}: '{text[:50]}...' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.3f})")
                                    else:
                                        logger.info(f"        - –°—Ç—Ä–æ–∫–∞ {line_idx}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ {line}")
                    
                    if variant_result:
                        logger.info(f"  - –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(variant_result) if variant_result else 0}")
                        if variant_result and len(variant_result) > 0:
                            logger.info(f"  - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {type(variant_result[0])}, –¥–ª–∏–Ω–∞: {len(variant_result[0]) if variant_result[0] else 0}")
                    
                    if variant_result and len(variant_result) > 0 and variant_result[0]:
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                        confidences = []
                        for detection in variant_result[0]:
                            if len(detection) >= 2 and len(detection[1]) >= 2:
                                conf = detection[1][1] if isinstance(detection[1][1], (int, float)) else 0.0
                                confidences.append(conf)
                        
                        avg_confidence = sum(confidences) / len(confidences) if confidences else 0.0
                        logger.info(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –Ω–∞–π–¥–µ–Ω–æ {len(variant_result[0])} —Ä–µ–≥–∏–æ–Ω–æ–≤, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if avg_confidence > best_confidence:
                            best_result = variant_result
                            best_confidence = avg_confidence
                            logger.info(f"üèÜ –ù–æ–≤—ã–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {avg_confidence:.2f}")
                    else:
                        logger.info(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        if variant_result:
                            logger.info(f"  - –†–µ–∑—É–ª—å—Ç–∞—Ç: {variant_result}")
                        
                except Exception as variant_error:
                    logger.error(f"üí• –û—à–∏–±–∫–∞ OCR –≤–∞—Ä–∏–∞–Ω—Ç–∞ #{i+1}: {str(variant_error)}")
                    logger.error(f"  - –¢–∏–ø –æ—à–∏–±–∫–∏: {type(variant_error).__name__}")
                    continue
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if best_result:
                ocr_result = best_result
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {best_confidence:.2f}")
                
                # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                logger.info(f"üîç –î–ï–¢–ê–õ–ò OCR –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
                if best_result and len(best_result) > 0 and best_result[0]:
                    page = best_result[0]
                    logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(page)}")
                    for i, region in enumerate(page[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        if region and len(region) >= 2:
                            text = region[1][0] if isinstance(region[1], (list, tuple)) and len(region[1]) > 0 else str(region[1])
                            conf = region[1][1] if isinstance(region[1], (list, tuple)) and len(region[1]) > 1 else 1.0
                            logger.info(f"    –†–µ–≥–∏–æ–Ω {i+1}: '{text[:30]}...' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.2f})")
            else:
                logger.info(f"‚ÑπÔ∏è OCR –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return {
                    'has_text': False,
                    'text_regions': [],
                    'multiple_fonts': False,
                    'confidence': 0.0,
                    'text_content': '',
                    'error': "OCR –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ PaddleOCR
            if not ocr_result:
                logger.info("‚ÑπÔ∏è PaddleOCR –≤–µ—Ä–Ω—É–ª None - –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞")
                return {
                    'has_text': False,
                    'text_regions': [],
                    'multiple_fonts': False,
                    'confidence': 0.0,
                    'text_content': '',
                    'error': "OCR –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
                }
            
            # OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page_result = ocr_result[0] if len(ocr_result) > 0 else None
            
            if not page_result:
                logger.info("‚ÑπÔ∏è PaddleOCR –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                return {
                    'has_text': False,
                    'text_regions': [],
                    'multiple_fonts': False,
                    'confidence': 0.0,
                    'text_content': '',
                    'error': "OCR –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            text_regions = []
            all_text = []
            confidences = []
            
            # –î–æ–±–∞–≤–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            logger.info(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(ocr_result)}, –¥–ª–∏–Ω–∞: {len(ocr_result) if ocr_result else 0}")
            if ocr_result and len(ocr_result) > 0:
                logger.info(f"üìä –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(ocr_result[0])}, –¥–ª–∏–Ω–∞: {len(ocr_result[0]) if ocr_result[0] else 0}")
                if ocr_result[0] and len(ocr_result[0]) > 0:
                    logger.info(f"üìù –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {ocr_result[0][0] if len(ocr_result[0]) > 0 else '–ø—É—Å—Ç–æ'}")
            
            for line in page_result:
                if line and len(line) >= 2:
                    bbox = line[0]  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏
                    text_info = line[1]  # (—Ç–µ–∫—Å—Ç, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
                    
                    logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É: bbox={bbox}, text_info={text_info}")
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    if isinstance(text_info, (list, tuple)) and len(text_info) >= 2:
                        text = str(text_info[0])
                        confidence = float(text_info[1])
                    elif isinstance(text_info, str):
                        text = text_info
                        confidence = 1.0  # –ï—Å–ª–∏ –Ω–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Å—Ç–∞–≤–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π text_info: {text_info}")
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                    region_info = self._analyze_text_region(image, bbox, text, confidence)
                    text_regions.append(region_info)
                    
                    all_text.append(text)
                    confidences.append(confidence)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            avg_confidence = np.mean(confidences) if confidences else 0.0
            text_content = ' '.join(all_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–û–ì–û —Ç–µ–∫—Å—Ç–∞ - —Å–º—è–≥—á–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            valid_regions = [r for r in text_regions if 
                           r.get('confidence', 0) > 0.3 and  # –ú–∏–Ω–∏–º—É–º 30% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–±—ã–ª–æ 50%)
                           not r.get('is_invalid', False)]   # –ù–µ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è
            clean_text = ''.join(c for c in text_content if c.isalnum() or c.isspace()).strip()  # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤—Å–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ - –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
            invalid_regions = [r for r in text_regions if r.get('is_invalid', False)]
            
            has_text = (len(valid_regions) > 0 and 
                       len(clean_text) >= 1 and  # –ú–∏–Ω–∏–º—É–º 1 —Å–∏–º–≤–æ–ª (–±—ã–ª–æ 2)
                       avg_confidence > 0.2 and  # –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—à–µ 20% (–±—ã–ª–æ 30%)
                       len(invalid_regions) < len(text_regions))  # –ù–µ –≤—Å–µ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: –≤—Å–µ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π={len(text_regions)}, –≤–∞–ª–∏–¥–Ω—ã—Ö={len(valid_regions)}, –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö={len(invalid_regions)}")
            logger.info(f"üìù –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç: '{clean_text[:50]}' (–¥–ª–∏–Ω–∞: {len(clean_text)})")
            logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: has_text={has_text}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            multiple_fonts = self._detect_multiple_fonts_from_regions(text_regions)
            
            logger.info(f"‚úÖ PaddleOCR: –Ω–∞–π–¥–µ–Ω–æ {len(text_regions)} –æ–±–ª–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞")
            logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
            logger.info(f"üìù –¢–µ–∫—Å—Ç: {text_content[:100]}...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            result = {
                'has_text': has_text,
                'text_regions': text_regions,
                'multiple_fonts': multiple_fonts,
                'confidence': avg_confidence,
                'text_content': text_content,
                'regions_count': len(text_regions),
                'ocr_boxes': text_regions,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å font_analyzer
                'error': None if has_text else "OCR –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç, –Ω–æ –æ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞"
            }
            
            logger.info(f"‚úÖ PaddleOCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return result
            
        except Exception as e:
            logger.error(f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _run_ocr_sync: {str(e)}")
            raise
    
    def _analyze_text_region(self, image: np.ndarray, bbox: List, text: str, confidence: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bbox –≤ —á–∏—Å–ª–æ–≤–æ–π –º–∞—Å—Å–∏–≤
                if isinstance(bbox[0], (list, tuple)):
                    # bbox = [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]
                    points = np.array(bbox, dtype=np.float32)
                    x_min = int(np.min(points[:, 0]))
                    y_min = int(np.min(points[:, 1]))
                    x_max = int(np.max(points[:, 0]))
                    y_max = int(np.max(points[:, 1]))
                else:
                    # bbox = [x1, y1, x2, y2]
                    coords = [float(coord) for coord in bbox[:4]]
                    x_min, y_min, x_max, y_max = map(int, coords)
            except (ValueError, TypeError, IndexError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bbox {bbox}: {str(e)}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                return {
                    'bbox': bbox,
                    'text': text,
                    'confidence': confidence,
                    'width': 10,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    'height': 10,
                    'area': 100,
                    'font_size_estimate': 12,
                    'is_invalid': True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—É—é
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            region = image[y_min:y_max, x_min:x_max]
            
            if region.size == 0:
                return {
                    'bbox': bbox,
                    'text': text,
                    'confidence': confidence,
                    'width': 0,
                    'height': 0,
                    'area': 0,
                    'font_size_estimate': 0
                }
            
            # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±–ª–∞—Å—Ç–∏
            width = x_max - x_min
            height = y_max - y_min
            area = width * height
            
            # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è)
            font_size_estimate = height * 0.7  # –ü—Ä–∏–º–µ—Ä–Ω–æ 70% –æ—Ç –≤—ã—Å–æ—Ç—ã –æ–±–ª–∞—Å—Ç–∏
            
            return {
                'bbox': bbox,
                'text': text,
                'confidence': confidence,
                'width': width,
                'height': height,
                'area': area,
                'font_size_estimate': font_size_estimate,
                'region': region
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return {
                'bbox': bbox,
                'text': text,
                'confidence': confidence,
                'width': 0,
                'height': 0,
                'area': 0,
                'font_size_estimate': 0
            }
    
    def _detect_multiple_fonts_from_regions(self, text_regions: List[Dict]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–ª–∞—Å—Ç–µ–π"""
        try:
            if len(text_regions) < 2:
                return False
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤
            font_sizes = [region.get('font_size_estimate', 0) for region in text_regions]
            font_sizes = [size for size in font_sizes if size > 0]
            
            if len(font_sizes) < 2:
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–±—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–æ–≤
            font_sizes = np.array(font_sizes)
            mean_size = np.mean(font_sizes)
            std_size = np.std(font_sizes)
            
            # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 15% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ - —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            variation_ratio = std_size / mean_size if mean_size > 0 else 0
            
            logger.info(f"üìè –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤: —Å—Ä–µ–¥–Ω–µ–µ={mean_size:.1f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ={std_size:.1f}, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç={variation_ratio:.2f}")
            
            # –û—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è PaddleOCR
            if variation_ratio > 0.15:  # 15% —Ä–∞–∑–±—Ä–æ—Å–∞
                logger.info("üî§ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)")
                return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–ª–æ—â–∞–¥–∏ –æ–±–ª–∞—Å—Ç–µ–π
            areas = [region.get('area', 0) for region in text_regions]
            areas = [area for area in areas if area > 0]
            
            if len(areas) >= 2:
                areas = np.array(areas)
                area_ratio = np.max(areas) / np.min(areas) if np.min(areas) > 0 else 0
                
                if area_ratio > 2.0:  # –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–ª–æ—â–∞–¥–∏ –±–æ–ª—å—à–µ —á–µ–º –≤ 2 —Ä–∞–∑–∞
                    logger.info("üî§ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (—Ä–∞–∑–Ω—ã–µ –ø–ª–æ—â–∞–¥–∏)")
                    return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º–Ω–æ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞ - –≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            if len(text_regions) >= 4:  # 4 –∏–ª–∏ –±–æ–ª—å—à–µ –æ–±–ª–∞—Å—Ç–µ–π
                logger.info(f"üî§ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (–º–Ω–æ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π: {len(text_regions)})")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {str(e)}")
            return False
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PaddleOCR"""
        available = self.ocr is not None and PADDLEOCR_AVAILABLE
        logger.info(f"üîç PaddleOCR –ø—Ä–æ–≤–µ—Ä–∫–∞: ocr={self.ocr is not None}, PADDLEOCR_AVAILABLE={PADDLEOCR_AVAILABLE}, –∏—Ç–æ–≥–æ={available}")
        return available
