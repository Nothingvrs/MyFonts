"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PaddleOCR - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
"""

import logging
import numpy as np
import cv2
from typing import List, Tuple, Optional, Dict, Any
from pathlib import Path
import asyncio
from concurrent.futures import ThreadPoolExecutor

from ..config.ocr_config import get_ocr_config, get_text_quality_config, get_multiple_fonts_config

# –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º logger
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try:
    import numpy as np
    logger.info("‚úÖ NumPy –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    logger.error(f"‚ùå NumPy –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
    raise

try:
    import cv2
    logger.info("‚úÖ OpenCV –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    logger.error(f"‚ùå OpenCV –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
    raise

try:
    from paddleocr import PaddleOCR
    PADDLEOCR_AVAILABLE = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PaddleOCR
    try:
        import paddleocr
        version = getattr(paddleocr, '__version__', 'unknown')
        logger.info(f"üì¶ PaddleOCR –≤–µ—Ä—Å–∏—è: {version}")
    except Exception as version_error:
        logger.info(f"üì¶ PaddleOCR –≤–µ—Ä—Å–∏—è: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ (–æ—à–∏–±–∫–∞: {str(version_error)})")
        
except ImportError as e:
    PADDLEOCR_AVAILABLE = False
    PaddleOCR = None
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ PaddleOCR: {str(e)}")
    logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paddlepaddle paddleocr")

if PADDLEOCR_AVAILABLE:
    logger.info("‚úÖ PaddleOCR —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
else:
    logger.error("‚ùå PaddleOCR –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")


class PaddleOCRService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é PaddleOCR"""
    
    def __init__(self):
        self.ocr = None
        self.executor = ThreadPoolExecutor(max_workers=1)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        try:
            self._initialize_ocr()
        except Exception as init_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ: {str(init_error)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(init_error).__name__}")
            # –ù–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º self.ocr = None
    
    def _initialize_ocr(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            if not PADDLEOCR_AVAILABLE:
                logger.error("‚ùå PaddleOCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install paddlepaddle paddleocr")
                return
            
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é PaddleOCR...")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
            try:
                ocr_config = get_ocr_config('advertisement')
                logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OCR –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                
                # –£–ø—Ä–æ—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é - —É–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                safe_config = {
                    'lang': ocr_config.get('lang', 'ru'),
                    'use_textline_orientation': True,  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–º–µ—Å—Ç–æ use_angle_cls
                    'det_db_thresh': 0.001,  # –ï–©–ï –ë–û–õ–ï–ï –ê–ì–†–ï–°–°–ò–í–ù–û
                    'det_db_box_thresh': 0.01,  # –ï–©–ï –ë–û–õ–ï–ï –ê–ì–†–ï–°–°–ò–í–ù–û
                    'det_db_unclip_ratio': 10.0,  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    'det_limit_side_len': 4096,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞
                    'det_limit_type': 'max',  # –ü–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
                }
                ocr_config = safe_config
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–ü–ï–† –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                
            except Exception as config_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OCR: {str(config_error)}")
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–£–ü–ï–† –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
                ocr_config = {
                    'lang': 'ru',
                    'use_textline_orientation': True,  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–º–µ—Å—Ç–æ use_angle_cls
                    'det_db_thresh': 0.001,  # –°–£–ü–ï–† –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
                    'det_db_box_thresh': 0.01,  # –°–£–ü–ï–† –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
                    'det_db_unclip_ratio': 10.0,  # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                    'det_limit_side_len': 4096,  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç
                    'det_limit_type': 'max',  # –ü–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
                }
            
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
            logger.info(f"  - det_db_thresh: {ocr_config['det_db_thresh']} (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –Ω–∏–∑–∫–∏–π)")
            logger.info(f"  - det_db_box_thresh: {ocr_config['det_db_box_thresh']} (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –Ω–∏–∑–∫–∏–π)")
            logger.info(f"  - det_db_unclip_ratio: {ocr_config['det_db_unclip_ratio']} (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)")
            
            # –°–æ–∑–¥–∞–µ–º PaddleOCR —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ PaddleOCR —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
            logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {ocr_config}")
            
            try:
                self.ocr = PaddleOCR(**ocr_config)
                logger.info("‚úÖ PaddleOCR –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                logger.info("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                
            except Exception as create_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PaddleOCR –æ–±—ä–µ–∫—Ç–∞: {str(create_error)}")
                logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(create_error).__name__}")
                logger.error(f"üîç –î–µ—Ç–∞–ª–∏: {repr(create_error)}")
                
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")
                try:
                    minimal_config = {
                        'lang': 'ru',
                        'use_textline_orientation': False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —É–≥–ª–æ–≤
                    }
                    logger.info(f"üìã –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {minimal_config}")
                    self.ocr = PaddleOCR(**minimal_config)
                    logger.info("‚úÖ PaddleOCR —Å–æ–∑–¥–∞–Ω —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
                except Exception as minimal_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: {str(minimal_error)}")
                    
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    logger.info("üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
                    try:
                        basic_config = {'lang': 'ru', 'use_textline_orientation': False}
                        logger.info(f"üìã –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {basic_config}")
                        self.ocr = PaddleOCR(**basic_config)
                        logger.info("‚úÖ PaddleOCR —Å–æ–∑–¥–∞–Ω —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
                    except Exception as basic_error:
                        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - PaddleOCR –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω: {str(basic_error)}")
                        self.ocr = None
                        return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–ª—Å—è
            if self.ocr is None:
                logger.error("‚ùå PaddleOCR –æ–±—ä–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è!")
                return
            
            logger.info("‚úÖ PaddleOCR –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º PaddleOCR...")
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
                test_image = np.ones((200, 400, 3), dtype=np.uint8) * 255
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
                cv2.putText(test_image, "TEST", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 0), 3)
                logger.info("üñºÔ∏è –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 200x400 —Å —Ç–µ–∫—Å—Ç–æ–º 'TEST'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ predict
                if not hasattr(self.ocr, 'predict') or not callable(getattr(self.ocr, 'predict', None)):
                    logger.error("‚ùå –£ –æ–±—ä–µ–∫—Ç–∞ PaddleOCR –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ predict")
                    self.ocr = None
                    return
                
                logger.info("‚úÖ –ú–µ—Ç–æ–¥ predict –Ω–∞–π–¥–µ–Ω, –¥–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤...")
                test_result = self.ocr.predict(test_image)
                logger.info(f"‚úÖ PaddleOCR —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(test_result)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç
                if test_result and len(test_result) > 0 and test_result[0]:
                    logger.info(f"‚úÖ –¢–µ—Å—Ç –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç: {len(test_result[0])} –æ–±–ª–∞—Å—Ç–µ–π")
                    for i, detection in enumerate(test_result[0]):
                        if len(detection) >= 2 and len(detection[1]) >= 2:
                            text = detection[1][0]
                            conf = detection[1][1]
                            logger.info(f"  - –û–±–ª–∞—Å—Ç—å {i+1}: '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.3f})")
                else:
                    logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                
            except Exception as test_error:
                logger.error(f"‚ùå PaddleOCR —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {str(test_error)}")
                logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–∞: {type(test_error).__name__}")
                logger.error(f"üîç –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞: {repr(test_error)}")
                self.ocr = None
                return
            
            logger.info("üéâ PaddleOCR –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaddleOCR: {str(e)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            self.ocr = None
    
    async def analyze_image(self, image: np.ndarray) -> Dict[str, Any]:
        """–ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return await self.detect_and_analyze_text(image)
    
    async def detect_and_analyze_text(self, image: np.ndarray) -> Dict[str, Any]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: detect_and_analyze_text –ù–ê–ß–ê–õ–°–Ø")
        logger.info("üöÄ === –ù–ê–ß–ê–õ–û detect_and_analyze_text ===")
        print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.shape}, {image.dtype}")
        logger.info(f"üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.shape}, {image.dtype}")
        
        if not self.ocr:
            logger.error("‚ùå PaddleOCR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {
                'has_text': False,
                'text_regions': [],
                'multiple_fonts': False,
                'confidence': 0.0,
                'text_content': '',
                'error': 'PaddleOCR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            }
        
        logger.info("‚úÖ PaddleOCR –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º OCR –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º _run_ocr_sync –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                self.executor,
                self._run_ocr_sync,
                image
            )
            logger.info(f"‚úÖ _run_ocr_sync –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç: {repr(result)}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: detect_and_analyze_text –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
            logger.info("üöÄ === –ö–û–ù–ï–¶ detect_and_analyze_text ===")
            return result
            
        except Exception as e:
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–®–ò–ë–ö–ê –≤ detect_and_analyze_text: {str(e)}")
            logger.error(f"üí• –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ PaddleOCR: {str(e)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {repr(e)}")
            logger.error("üöÄ === –ö–û–ù–ï–¶ detect_and_analyze_text (–° –û–®–ò–ë–ö–û–ô) ===")
            return {
                'has_text': False,
                'text_regions': [],
                'multiple_fonts': False,
                'confidence': 0.0,
                'text_content': '',
                'error': f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OCR: {str(e)}"
            }
    
    def _create_image_variants(self, image: np.ndarray) -> List[np.ndarray]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        try:
            if len(image.shape) == 3:
                gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            else:
                gray = image.copy()
            
            variants = []
            
            # 1. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            variants.append(image.copy())
            
            # 2. –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
            try:
                h, w = gray.shape
                if min(h, w) < 800:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
                    scale = max(3, 800 // min(h, w))  # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
                    if len(image.shape) == 3:
                        resized = cv2.resize(image, (w * scale, h * scale), interpolation=cv2.INTER_CUBIC)
                    else:
                        resized_gray = cv2.resize(gray, (w * scale, h * scale), interpolation=cv2.INTER_CUBIC)
                        resized = cv2.cvtColor(resized_gray, cv2.COLOR_GRAY2RGB)
                    variants.append(resized)
                
                # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if min(h, w) < 400:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
                    scale = max(5, 1000 // min(h, w))  # –ï—â–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
                    if len(image.shape) == 3:
                        resized_large = cv2.resize(image, (w * scale, h * scale), interpolation=cv2.INTER_CUBIC)
                    else:
                        resized_gray_large = cv2.resize(gray, (w * scale, h * scale), interpolation=cv2.INTER_CUBIC)
                        resized_large = cv2.cvtColor(resized_gray_large, cv2.COLOR_GRAY2RGB)
                    variants.append(resized_large)
            except:
                pass
            
            # 3. –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            try:
                enhanced = cv2.convertScaleAbs(gray, alpha=3.0, beta=50)
                enhanced_rgb = cv2.cvtColor(enhanced, cv2.COLOR_GRAY2RGB)
                variants.append(enhanced_rgb)
            except:
                pass
            
            # 4. CLAHE (–∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—è)
            try:
                clahe = cv2.createCLAHE(clipLimit=5.0, tileGridSize=(8,8))
                clahe_image = clahe.apply(gray)
                clahe_rgb = cv2.cvtColor(clahe_image, cv2.COLOR_GRAY2RGB)
                variants.append(clahe_rgb)
            except:
                pass
            
            # 5. –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
            try:
                adaptive = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 15, 5)
                adaptive_rgb = cv2.cvtColor(adaptive, cv2.COLOR_GRAY2RGB)
                variants.append(adaptive_rgb)
            except:
                pass
            
            # 6. –ò–Ω–≤–µ—Ä—Å–∏—è (–¥–ª—è –±–µ–ª–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ)
            try:
                inverted = cv2.bitwise_not(gray)
                inverted_rgb = cv2.cvtColor(inverted, cv2.COLOR_GRAY2RGB)
                variants.append(inverted_rgb)
            except:
                pass
            
            # 7. –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
            try:
                kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))
                morphed = cv2.morphologyEx(gray, cv2.MORPH_CLOSE, kernel)
                morphed_rgb = cv2.cvtColor(morphed, cv2.COLOR_GRAY2RGB)
                variants.append(morphed_rgb)
            except:
                pass
            
            # 8. –õ–µ–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ
            try:
                blurred = cv2.GaussianBlur(gray, (3, 3), 0)
                blurred_rgb = cv2.cvtColor(blurred, cv2.COLOR_GRAY2RGB)
                variants.append(blurred_rgb)
            except:
                pass
            
            # 9. –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å
            try:
                brightened = cv2.convertScaleAbs(gray, alpha=2.0, beta=80)
                brightened_rgb = cv2.cvtColor(brightened, cv2.COLOR_GRAY2RGB)
                variants.append(brightened_rgb)
            except:
                pass
            
            # 10. –î–≤–æ–π–Ω–∞—è –∏–Ω–≤–µ—Ä—Å–∏—è
            try:
                double_inverted = cv2.bitwise_not(cv2.bitwise_not(gray))
                double_inverted_rgb = cv2.cvtColor(double_inverted, cv2.COLOR_GRAY2RGB)
                variants.append(double_inverted_rgb)
            except:
                pass
            
            # 11. –õ–æ–∫–∞–ª—å–Ω–∞—è —ç–∫–≤–∞–ª–∏–∑–∞—Ü–∏—è
            try:
                clahe_local = cv2.createCLAHE(clipLimit=8.0, tileGridSize=(4,4))
                local_eq = clahe_local.apply(gray)
                local_eq_rgb = cv2.cvtColor(local_eq, cv2.COLOR_GRAY2RGB)
                variants.append(local_eq_rgb)
            except:
                pass
            
            # 12. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            try:
                combined = cv2.convertScaleAbs(gray, alpha=2.5, beta=60)
                combined = cv2.GaussianBlur(combined, (3, 3), 0)
                combined = cv2.adaptiveThreshold(combined, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 13, 3)
                combined_rgb = cv2.cvtColor(combined, cv2.COLOR_GRAY2RGB)
                variants.append(combined_rgb)
            except:
                pass
            
            # 13. –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            try:
                extreme_contrast = cv2.convertScaleAbs(gray, alpha=5.0, beta=100)
                extreme_rgb = cv2.cvtColor(extreme_contrast, cv2.COLOR_GRAY2RGB)
                variants.append(extreme_rgb)
            except:
                pass
            
            # 14. –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è (—É–±–∏—Ä–∞–µ—Ç —à—É–º)
            try:
                kernel_open = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
                opened = cv2.morphologyEx(gray, cv2.MORPH_OPEN, kernel_open)
                opened_rgb = cv2.cvtColor(opened, cv2.COLOR_GRAY2RGB)
                variants.append(opened_rgb)
            except:
                pass
            
            # 15. –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã)
            try:
                kernel_close = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
                closed = cv2.morphologyEx(gray, cv2.MORPH_CLOSE, kernel_close)
                closed_rgb = cv2.cvtColor(closed, cv2.COLOR_GRAY2RGB)
                variants.append(closed_rgb)
            except:
                pass
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è OCR")
            return variants
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {str(e)}")
            return [image.copy()]
    
    def _run_ocr_sync(self, image: np.ndarray) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ OCR —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: _run_ocr_sync –ù–ê–ß–ê–õ–°–Ø")
        logger.info("üöÄ === –ù–ê–ß–ê–õ–û _run_ocr_sync ===")
        try:
            print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ó–∞–ø—É—Å–∫ PaddleOCR –∞–Ω–∞–ª–∏–∑–∞...")
            logger.info("üîç –ó–∞–ø—É—Å–∫ PaddleOCR –∞–Ω–∞–ª–∏–∑–∞...")
            logger.info(f"üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.shape}")
            logger.info(f"üñºÔ∏è –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.dtype}")
            logger.info(f"üñºÔ∏è –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –ø–∏–∫—Å–µ–ª–µ–π: [{image.min()}, {image.max()}]")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            image_variants = self._create_image_variants(image)
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –°–æ–∑–¥–∞–Ω–æ {len(image_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–æ {len(image_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
            ocr_result = None
            best_result = None
            best_confidence = 0.0
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for i, variant in enumerate(image_variants):
                try:
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç #{i+1}/{len(image_variants)}")
                    logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ OCR #{i+1}/{len(image_variants)}")
                    logger.info(f"  - –†–∞–∑–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞: {variant.shape}")
                    logger.info(f"  - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {variant.dtype}")
                    logger.info(f"  - –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: [{variant.min()}, {variant.max()}]")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º PaddleOCR
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –≤—ã–∑—ã–≤–∞–µ–º PaddleOCR.predict()...")
                    logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –≤—ã–∑—ã–≤–∞–µ–º PaddleOCR.predict()...")
                    variant_result = self.ocr.predict(variant)
                    
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: PaddleOCR –≤–µ—Ä–Ω—É–ª: {type(variant_result)}")
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: repr(result): {repr(variant_result)}")
                    logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç PaddleOCR: {type(variant_result)}")
                    logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: repr(result): {repr(variant_result)}")
                    
                    if variant_result:
                        print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None, –¥–ª–∏–Ω–∞: {len(variant_result)}")
                        logger.info(f"  - –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(variant_result)}")
                        if len(variant_result) > 0:
                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {len(variant_result[0]) if variant_result[0] else 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                            logger.info(f"  - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {len(variant_result[0]) if variant_result[0] else 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                            if variant_result[0]:
                                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ù–ï –ø—É—Å—Ç–∞—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...")
                                logger.info(f"  - –î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
                                for j, detection in enumerate(variant_result[0]):
                                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}, –æ–±–ª–∞—Å—Ç—å {j+1}: —Ç–∏–ø={type(detection)}, –¥–ª–∏–Ω–∞={len(detection) if hasattr(detection, '__len__') else 'N/A'}")
                                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}, –æ–±–ª–∞—Å—Ç—å {j+1}: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ={repr(detection)}")
                                    logger.info(f"    * –û–±–ª–∞—Å—Ç—å {j+1}: —Ç–∏–ø={type(detection)}, –¥–ª–∏–Ω–∞={len(detection) if hasattr(detection, '__len__') else 'N/A'}")
                                    logger.info(f"    * –û–±–ª–∞—Å—Ç—å {j+1}: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ={repr(detection)}")
                                    if len(detection) >= 2:
                                        bbox = detection[0]
                                        text_info = detection[1]
                                        print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}, –æ–±–ª–∞—Å—Ç—å {j+1}: bbox={repr(bbox)}, text_info={repr(text_info)}")
                                        logger.info(f"    * –û–±–ª–∞—Å—Ç—å {j+1}: bbox={repr(bbox)}, text_info={repr(text_info)}")
                                        if isinstance(text_info, (list, tuple)) and len(text_info) >= 2:
                                            text = str(text_info[0])
                                            conf = float(text_info[1])
                                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}, –æ–±–ª–∞—Å—Ç—å {j+1}: –ù–ê–ô–î–ï–ù –¢–ï–ö–°–¢='{text}', —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={conf:.3f}")
                                            logger.info(f"    * –û–±–ª–∞—Å—Ç—å {j+1}: —Ç–µ–∫—Å—Ç='{text}', —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={conf:.3f}, bbox={bbox}")
                                        else:
                                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}, –æ–±–ª–∞—Å—Ç—å {j+1}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç text_info={repr(text_info)}")
                                            logger.info(f"    * –û–±–ª–∞—Å—Ç—å {j+1}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {text_info}")
                            else:
                                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ü–£–°–¢–ê–Ø")
                                logger.info(f"  - –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è")
                        else:
                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: PaddleOCR –≤–µ—Ä–Ω—É–ª None")
                            logger.info(f"  - PaddleOCR –≤–µ—Ä–Ω—É–ª None")
                    
                    if variant_result and len(variant_result) > 0 and variant_result[0]:
                        # –ü–†–û–í–ï–†–Ø–ï–ú –ù–û–í–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ª–æ–≤–∞—Ä—å)
                        if isinstance(variant_result[0], dict):
                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –ù–û–í–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ª–æ–≤–∞—Ä—å)")
                            logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –ù–û–í–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ª–æ–≤–∞—Ä—å)")
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                            rec_texts = variant_result[0].get('rec_texts', [])
                            rec_scores = variant_result[0].get('rec_scores', [])
                            dt_polys = variant_result[0].get('dt_polys', [])
                            
                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: rec_texts={rec_texts}")
                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: rec_scores={rec_scores}")
                            logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: rec_texts={rec_texts}")
                            logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: rec_scores={rec_scores}")
                            
                            if rec_texts and len(rec_texts) > 0:
                                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                                avg_confidence = sum(rec_scores) / len(rec_scores) if rec_scores else 0.0
                                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –ù–ê–ô–î–ï–ù –¢–ï–ö–°–¢! {len(rec_texts)} —Ç–µ–∫—Å—Ç–æ–≤, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
                                logger.info(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –Ω–∞–π–¥–µ–Ω–æ {len(rec_texts)} —Ç–µ–∫—Å—Ç–æ–≤, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                if avg_confidence > best_confidence:
                                    best_result = variant_result
                                    best_confidence = avg_confidence
                                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: üèÜ –ù–û–í–´–ô –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –í–∞—Ä–∏–∞–Ω—Ç #{i+1}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
                                    logger.info(f"üèÜ –ù–æ–≤—ã–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {avg_confidence:.2f}")
                            else:
                                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –ù–û–í–´–ô –§–û–†–ú–ê–¢, –Ω–æ —Ç–µ–∫—Å—Ç—ã –ø—É—Å—Ç—ã–µ")
                                logger.info(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–æ —Ç–µ–∫—Å—Ç—ã –ø—É—Å—Ç—ã–µ")
                        
                        # –°–¢–ê–†–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤)
                        elif isinstance(variant_result[0], (list, tuple)):
                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –°–¢–ê–†–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ø–∏—Å–æ–∫)")
                            logger.info(f"üîç –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –°–¢–ê–†–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ø–∏—Å–æ–∫)")
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                            confidences = []
                            for detection in variant_result[0]:
                                if len(detection) >= 2 and len(detection[1]) >= 2:
                                    conf = detection[1][1] if isinstance(detection[1][1], (int, float)) else 0.0
                                    confidences.append(conf)
                            
                            avg_confidence = sum(confidences) / len(confidences) if confidences else 0.0
                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –ù–ê–ô–î–ï–ù –¢–ï–ö–°–¢! {len(variant_result[0])} —Ä–µ–≥–∏–æ–Ω–æ–≤, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
                            logger.info(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –Ω–∞–π–¥–µ–Ω–æ {len(variant_result[0])} —Ä–µ–≥–∏–æ–Ω–æ–≤, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            if avg_confidence > best_confidence:
                                best_result = variant_result
                                best_confidence = avg_confidence
                                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: üèÜ –ù–û–í–´–ô –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –í–∞—Ä–∏–∞–Ω—Ç #{i+1}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
                                logger.info(f"üèÜ –ù–æ–≤—ã–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {avg_confidence:.2f}")
                        
                        else:
                            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –§–û–†–ú–ê–¢: {type(variant_result[0])}")
                            logger.info(f"‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {type(variant_result[0])}")
                    
                    else:
                        print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: –¢–ï–ö–°–¢ –ù–ï –ù–ê–ô–î–ï–ù")
                        logger.info(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç #{i+1}: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                except Exception as variant_error:
                    logger.error(f"üí• –û—à–∏–±–∫–∞ OCR –≤–∞—Ä–∏–∞–Ω—Ç–∞ #{i+1}: {str(variant_error)}")
                    continue
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if best_result:
                ocr_result = best_result
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {best_confidence:.2f}")
                logger.info(f"üîç –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {repr(best_result)}")
            else:
                logger.info(f"‚ÑπÔ∏è OCR –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                logger.info(f"üîç –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã–ª–∏ –ø—É—Å—Ç—ã–º–∏")
                return {
                    'has_text': False,
                    'text_regions': [],
                    'multiple_fonts': False,
                    'confidence': 0.0,
                    'text_content': '',
                    'error': "OCR –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {repr(ocr_result)}")
            page_result = ocr_result[0] if len(ocr_result) > 0 else None
            logger.info(f"üîç page_result: {repr(page_result)}")
            
            if not page_result:
                logger.info("‚ÑπÔ∏è PaddleOCR –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                logger.info(f"üîç ocr_result –±—ã–ª: {repr(ocr_result)}")
                return {
                    'has_text': False,
                    'text_regions': [],
                    'multiple_fonts': False,
                    'confidence': 0.0,
                    'text_content': '',
                    'error': "OCR –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            text_regions = []
            all_text = []
            confidences = []
            
            # –ù–û–í–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ª–æ–≤–∞—Ä—å)
            if isinstance(page_result, dict):
                logger.info("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ù–û–í–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ª–æ–≤–∞—Ä—å)")
                rec_texts = page_result.get('rec_texts', [])
                rec_scores = page_result.get('rec_scores', [])
                dt_polys = page_result.get('dt_polys', [])
                
                logger.info(f"üîç rec_texts: {rec_texts}")
                logger.info(f"üîç rec_scores: {rec_scores}")
                logger.info(f"üîç dt_polys: {dt_polys}")
                
                for i, (text, confidence) in enumerate(zip(rec_texts, rec_scores)):
                    if text and confidence > 0:
                        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                        bbox = dt_polys[i] if i < len(dt_polys) else [[0, 0], [100, 0], [100, 100], [0, 100]]
                        region_info = self._analyze_text_region(image, bbox, text, confidence)
                        text_regions.append(region_info)
                        all_text.append(text)
                        confidences.append(confidence)
                        
                        logger.info(f"üîç –¢–µ–∫—Å—Ç #{i+1}: '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
            
            # –°–¢–ê–†–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤)
            elif isinstance(page_result, (list, tuple)):
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –°–¢–ê–†–´–ô –§–û–†–ú–ê–¢ PaddleOCR (—Å–ø–∏—Å–æ–∫): {len(page_result)} —Å—Ç—Ä–æ–∫")
                for i, line in enumerate(page_result):
                    logger.info(f"üîç –°—Ç—Ä–æ–∫–∞ #{i+1}: {repr(line)}")
                    logger.info(f"üîç –°—Ç—Ä–æ–∫–∞ #{i+1}: —Ç–∏–ø={type(line)}, –¥–ª–∏–Ω–∞={len(line) if hasattr(line, '__len__') else 'N/A'}")
                    if line and len(line) >= 2:
                        bbox = line[0]  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏
                        text_info = line[1]  # (—Ç–µ–∫—Å—Ç, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                        if isinstance(text_info, (list, tuple)) and len(text_info) >= 2:
                            text = str(text_info[0])
                            confidence = float(text_info[1])
                        elif isinstance(text_info, str):
                            text = text_info
                            confidence = 1.0
                        else:
                            continue
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                        region_info = self._analyze_text_region(image, bbox, text, confidence)
                        text_regions.append(region_info)
                        
                        all_text.append(text)
                        confidences.append(confidence)
            
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(page_result)}")
                return {
                    'has_text': False,
                    'text_regions': [],
                    'multiple_fonts': False,
                    'confidence': 0.0,
                    'text_content': '',
                    'error': f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR: {type(page_result)}"
                }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            avg_confidence = np.mean(confidences) if confidences else 0.0
            text_content = ' '.join(all_text)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
            quality_config = get_text_quality_config()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
            valid_regions = [r for r in text_regions if 
                           r.get('confidence', 0) > quality_config['min_confidence']]
            clean_text = ''.join(c for c in text_content if c.isalnum() or c.isspace()).strip()
            
            # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ is_invalid
            invalid_regions = []
            
            # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê ===")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í—Å–µ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π: {len(text_regions)}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞–ª–∏–¥–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: {len(valid_regions)}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç: '{clean_text}' (–¥–ª–∏–Ω–∞: {len(clean_text)})")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ü–æ—Ä–æ–≥–∏: min_confidence={quality_config['min_confidence']}, min_text_length={quality_config['min_text_length']}, min_avg_confidence={quality_config['min_avg_confidence']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            cond1 = len(valid_regions) > 0
            cond2 = len(clean_text) >= quality_config['min_text_length']
            cond3 = avg_confidence > quality_config['min_avg_confidence']
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –£—Å–ª–æ–≤–∏–µ 1 (–≤–∞–ª–∏–¥–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ > 0): {cond1}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –£—Å–ª–æ–≤–∏–µ 2 (–¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ >= {quality_config['min_text_length']}): {cond2}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –£—Å–ª–æ–≤–∏–µ 3 (—Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å > {quality_config['min_avg_confidence']}): {cond3}")
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –æ–±–ª–∞—Å—Ç–∏
            for i, region in enumerate(text_regions):
                conf = region.get('confidence', 0)
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–±–ª–∞—Å—Ç—å #{i+1}: confidence={conf:.3f}, –ø—Ä–æ—Ö–æ–¥–∏—Ç min_confidence={conf > quality_config['min_confidence']}")
            
            has_text = (len(valid_regions) > 0 and 
                       len(clean_text) >= quality_config['min_text_length'] and
                       avg_confidence > quality_config['min_avg_confidence'])
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ has_text = {has_text}")
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: –≤—Å–µ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π={len(text_regions)}, –≤–∞–ª–∏–¥–Ω—ã—Ö={len(valid_regions)}")
            logger.info(f"üìù –ß–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç: '{clean_text[:50]}' (–¥–ª–∏–Ω–∞: {len(clean_text)})")
            logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: has_text={has_text}")
            
            # –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –®–†–ò–§–¢–û–í
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –®–†–ò–§–¢–û–í ===")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(text_regions)} –æ–±–ª–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            multiple_fonts = self._detect_multiple_fonts_from_regions(text_regions)
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {multiple_fonts}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'has_text': has_text,
                'text_regions': text_regions,
                'multiple_fonts': multiple_fonts,
                'confidence': avg_confidence,
                'text_content': text_content,
                'regions_count': len(text_regions),
                'ocr_boxes': text_regions,
                'error': None if has_text else "OCR –Ω–∞—à–µ–ª —Ç–µ–∫—Å—Ç, –Ω–æ –æ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞"
            }
            
            logger.info(f"‚úÖ PaddleOCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç: has_text={has_text}, —Ç–µ–∫—Å—Ç='{text_content[:50]}...'")
            logger.info(f"üî§ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {multiple_fonts}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: _run_ocr_sync –∑–∞–≤–µ—Ä—à–µ–Ω, has_text={has_text}, multiple_fonts={multiple_fonts}")
            logger.info("üöÄ === –ö–û–ù–ï–¶ _run_ocr_sync ===")
            return result
            
        except Exception as e:
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–®–ò–ë–ö–ê –≤ _run_ocr_sync: {str(e)}")
            logger.error(f"üí• –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _run_ocr_sync: {str(e)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {repr(e)}")
            logger.error("üöÄ === –ö–û–ù–ï–¶ _run_ocr_sync (–° –û–®–ò–ë–ö–û–ô) ===")
            raise
    
    def _analyze_text_region(self, image: np.ndarray, bbox: List, text: str, confidence: float) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            try:
                logger.info(f"üîç –ü–∞—Ä—Å–∏–º bbox: {repr(bbox)}, —Ç–∏–ø: {type(bbox)}")
                
                if isinstance(bbox, (list, tuple)) and len(bbox) > 0:
                    # –ù–û–í–´–ô –§–û–†–ú–ê–¢: bbox –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    if isinstance(bbox[0], (list, tuple)):
                        # –§–æ—Ä–º–∞—Ç: [[x1,y1], [x2,y2], [x3,y3], [x4,y4]]
                        points = np.array(bbox, dtype=np.float32)
                        x_min = int(np.min(points[:, 0]))
                        y_min = int(np.min(points[:, 1]))
                        x_max = int(np.max(points[:, 0]))
                        y_max = int(np.max(points[:, 1]))
                        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ bbox: [[x,y], [x,y], [x,y], [x,y]] -> x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    elif len(bbox) >= 4:
                        # –§–æ—Ä–º–∞—Ç: [x1, y1, x2, y2] –∏–ª–∏ [x1, y1, x2, y2, ...]
                        coords = [float(coord) for coord in bbox[:4]]
                        x_min, y_min, x_max, y_max = map(int, coords)
                        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ bbox: [x1, y1, x2, y2] -> x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    elif len(bbox) == 2:
                        # –§–æ—Ä–º–∞—Ç: [x, y] - –æ–¥–Ω–∞ —Ç–æ—á–∫–∞, —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ –Ω–µ—ë
                        x_min = int(float(bbox[0])) - 10
                        y_min = int(float(bbox[1])) - 10
                        x_max = int(float(bbox[0])) + 10
                        y_max = int(float(bbox[1])) + 10
                        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ bbox: [x, y] -> —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    else:
                        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        x_min, y_min, x_max, y_max = 0, 0, 100, 100
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç bbox {bbox}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                else:
                    # bbox –ø—É—Å—Ç–æ–π –∏–ª–∏ None, —Å–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    x_min, y_min, x_max, y_max = 0, 0, 100, 100
                    logger.warning(f"‚ö†Ô∏è bbox –ø—É—Å—Ç–æ–π –∏–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if x_min >= x_max or y_min >= y_max:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    if x_min >= x_max:
                        x_min, x_max = min(x_min, x_max), max(x_min, x_max)
                        if x_min == x_max:
                            x_max = x_min + 100
                    if y_min >= y_max:
                        y_min, y_max = min(y_min, y_max), max(y_min, y_max)
                        if y_min == y_max:
                            y_max = y_min + 100
                    logger.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                    
            except (ValueError, TypeError, IndexError) as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bbox {bbox}: {str(e)}")
                logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                logger.error(f"üîç –î–µ—Ç–∞–ª–∏: {repr(e)}")
                # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–º–µ—Å—Ç–æ –ø–æ–º–µ—Ç–∫–∏ –∫–∞–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π
                x_min, y_min, x_max, y_max = 0, 0, 100, 100
                logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            region = image[y_min:y_max, x_min:x_max]
            
            if region.size == 0:
                return {
                    'bbox': bbox,
                    'text': text,
                    'confidence': confidence,
                    'width': 0,
                    'height': 0,
                    'area': 0,
                    'font_size_estimate': 0
                }
            
            # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–±–ª–∞—Å—Ç–∏
            width = x_max - x_min
            height = y_max - y_min
            area = width * height
            font_size_estimate = height * 0.7
            
            return {
                'bbox': bbox,
                'text': text,
                'confidence': confidence,
                'width': width,
                'height': height,
                'area': area,
                'font_size_estimate': font_size_estimate,
                'region': region
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return {
                'bbox': bbox,
                'text': text,
                'confidence': confidence,
                'width': 0,
                'height': 0,
                'area': 0,
                'font_size_estimate': 0
            }
    
    def _detect_multiple_fonts_from_regions(self, text_regions: List[Dict]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–ª–∞—Å—Ç–µ–π"""
        try:
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: === –ê–ù–ê–õ–ò–ó –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –®–†–ò–§–¢–û–í ===")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í—Å–µ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(text_regions)}")
            
            if len(text_regions) < 2:
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –û–±–ª–∞—Å—Ç–µ–π < 2, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –ù–ï–¢")
                return False
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤
            font_sizes = [region.get('font_size_estimate', 0) for region in text_regions]
            font_sizes = [size for size in font_sizes if size > 0]
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –†–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤: {font_sizes}")
            
            if len(font_sizes) < 2:
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –í–∞–ª–∏–¥–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ < 2, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –ù–ï–¢")
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–±—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–æ–≤
            font_sizes = np.array(font_sizes)
            mean_size = np.mean(font_sizes)
            std_size = np.std(font_sizes)
            
            variation_ratio = std_size / mean_size if mean_size > 0 else 0
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤: —Å—Ä–µ–¥–Ω–µ–µ={mean_size:.1f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ={std_size:.1f}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {variation_ratio:.3f}")
            
            logger.info(f"üìè –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤: —Å—Ä–µ–¥–Ω–µ–µ={mean_size:.1f}, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ={std_size:.1f}, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç={variation_ratio:.2f}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
            fonts_config = get_multiple_fonts_config()
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ü–æ—Ä–æ–≥–∏: size_variation_threshold={fonts_config['size_variation_threshold']}")
            
            # –ú–µ–Ω–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è PaddleOCR
            if variation_ratio > fonts_config['size_variation_threshold']:
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: ‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º!")
                logger.info("üî§ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)")
                return True
            else:
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: ‚ùå –†–∞–∑–º–µ—Ä—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø–æ—Ä–æ–≥: {variation_ratio:.3f} <= {fonts_config['size_variation_threshold']}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–ª–æ—â–∞–¥–∏ –æ–±–ª–∞—Å—Ç–µ–π
            areas = [region.get('area', 0) for region in text_regions]
            areas = [area for area in areas if area > 0]
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ü–ª–æ—â–∞–¥–∏ –æ–±–ª–∞—Å—Ç–µ–π: {areas}")
            
            if len(areas) >= 2:
                areas = np.array(areas)
                area_ratio = np.max(areas) / np.min(areas) if np.min(areas) > 0 else 0
                
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π: {area_ratio:.3f}")
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ü–æ—Ä–æ–≥: area_ratio_threshold={fonts_config['area_ratio_threshold']}")
                
                if area_ratio > fonts_config['area_ratio_threshold']:
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: ‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –ø–æ –ø–ª–æ—â–∞–¥—è–º!")
                    logger.info("üî§ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (—Ä–∞–∑–Ω—ã–µ –ø–ª–æ—â–∞–¥–∏)")
                    return True
                else:
                    print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: ‚ùå –ü–ª–æ—â–∞–¥–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø–æ—Ä–æ–≥: {area_ratio:.3f} <= {fonts_config['area_ratio_threshold']}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º–Ω–æ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∞—Å—Ç–µ–π: {len(text_regions)}")
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: –ü–æ—Ä–æ–≥: min_regions_count={fonts_config['min_regions_count']}")
            
            if len(text_regions) >= fonts_config['min_regions_count']:
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: ‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±–ª–∞—Å—Ç–µ–π!")
                logger.info(f"üî§ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (–º–Ω–æ–≥–æ –æ–±–ª–∞—Å—Ç–µ–π: {len(text_regions)})")
                return True
            else:
                print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: ‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∞—Å—Ç–µ–π –Ω–µ –ø—Ä–æ—à–ª–æ –ø–æ—Ä–æ–≥: {len(text_regions)} < {fonts_config['min_regions_count']}")
            
            print(f"üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–í–û–î: ‚ùå –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {str(e)}")
            return False
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PaddleOCR"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            library_available = PADDLEOCR_AVAILABLE
            object_created = self.ocr is not None
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –µ—Å—Ç—å, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            object_working = False
            if object_created:
                try:
                    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ —Å–ª–æ–º–∞–Ω
                    object_working = hasattr(self.ocr, 'predict') and callable(getattr(self.ocr, 'predict', None))
                except Exception as check_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞: {str(check_error)}")
                    object_working = False
            
            available = library_available and object_created and object_working
            
            logger.info(f"üîç PaddleOCR –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
            logger.info(f"  - –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {library_available}")
            logger.info(f"  - –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {object_created}")
            logger.info(f"  - –û–±—ä–µ–∫—Ç —Ä–∞–±–æ—á–∏–π: {object_working}")
            logger.info(f"  - –ò–¢–û–ì–û –¥–æ—Å—Ç—É–ø–µ–Ω: {available}")
            
            if not available:
                if not library_available:
                    logger.error("‚ùå PaddleOCR –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                elif not object_created:
                    logger.error("‚ùå PaddleOCR –æ–±—ä–µ–∫—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                elif not object_working:
                    logger.error("‚ùå PaddleOCR –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return available
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PaddleOCR: {str(e)}")
            return False
    
    def reinitialize(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR"""
        try:
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR...")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—ä–µ–∫—Ç
            if self.ocr:
                logger.info("üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—ä–µ–∫—Ç PaddleOCR...")
                self.ocr = None
            
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            self._initialize_ocr()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            is_available = self.is_available()
            
            if is_available:
                logger.info("‚úÖ PaddleOCR —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                logger.error("‚ùå PaddleOCR –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            
            return is_available
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PaddleOCR: {str(e)}")
            logger.error(f"üí° –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return False
