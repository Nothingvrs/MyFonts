"""
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import logging
import numpy as np
from typing import Dict, Any, List
import asyncio
from concurrent.futures import ThreadPoolExecutor

try:
    from paddleocr import PaddleOCR
    PADDLEOCR_AVAILABLE = True
except ImportError:
    PADDLEOCR_AVAILABLE = False
    PaddleOCR = None

logger = logging.getLogger(__name__)


class PaddleOCRServiceNew:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self):
        self.ocr = None
        self.executor = ThreadPoolExecutor(max_workers=1)
        self._initialize()
    
    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        try:
            if not PADDLEOCR_AVAILABLE:
                logger.error("‚ùå PaddleOCR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return
            
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PaddleOCR (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è)...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            try:
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                logger.info("üá∑üá∫ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤...")
                self.ocr = PaddleOCR(
                    use_angle_cls=True,     # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É–≥–ª–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
                    lang='ru',              # –†–£–°–°–ö–ò–ô —è–∑—ã–∫ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                    show_log=False,         # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ PaddleOCR
                    use_gpu=False,          # CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    det_db_thresh=0.2,      # –ë–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                    rec_batch_num=8         # –ë–æ–ª—å—à–∏–π –±–∞—Ç—á –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                )
                logger.info("‚úÖ PaddleOCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
                
            except Exception as e1:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º: {e1}")
                try:
                    # Fallback –Ω–∞ –∫–∏—Ç–∞–π—Å–∫—É—é –º–æ–¥–µ–ª—å (—Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
                    logger.info("üîÑ Fallback: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–∏—Ç–∞–π—Å–∫–æ–π –º–æ–¥–µ–ª—å—é...")
                    self.ocr = PaddleOCR(
                        use_angle_cls=True,
                        lang='ch',              # –ö–∏—Ç–∞–π—Å–∫–∞—è –º–æ–¥–µ–ª—å –∫–∞–∫ fallback
                        show_log=False,
                        use_gpu=False
                    )
                    logger.info("‚úÖ PaddleOCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–∏—Ç–∞–π—Å–∫–æ–π –º–æ–¥–µ–ª—å—é")
                    
                except Exception as e2:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –ª–∞—Ç–∏–Ω—Å–∫–æ–π –º–æ–¥–µ–ª—å—é: {e2}")
                    try:
                        # –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        logger.info("üîÑ –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
                        self.ocr = PaddleOCR(use_angle_cls=True)
                        logger.info("‚úÖ PaddleOCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–∞–∑–æ–≤–æ")
                        
                    except Exception as e3:
                        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e3}")
                        self.ocr = None
            
            logger.info("‚úÖ PaddleOCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.ocr = None
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        return self.ocr is not None and PADDLEOCR_AVAILABLE
    
    async def analyze_image(self, image: np.ndarray) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.is_available():
            return {
                'has_text': False,
                'error': 'PaddleOCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }
        
        try:
            logger.info(f"üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image.shape}, dtype: {image.dtype}")
            logger.info(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω –ø–∏–∫—Å–µ–ª–µ–π: min={image.min()}, max={image.max()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—É—Å—Ç–æ–µ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if image.size == 0:
                return {'has_text': False, 'error': '–ü—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if len(image.shape) != 3 or image.shape[2] != 3:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.shape}")
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                if len(image.shape) == 2:
                    import cv2
                    image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)
                elif len(image.shape) == 3 and image.shape[2] == 4:
                    image = image[:, :, :3]  # –£–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º OCR –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                self.executor,
                self._run_ocr,
                image
            )
            
            logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç OCR –∞–Ω–∞–ª–∏–∑–∞: {result}")
            return result
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {
                'has_text': False,
                'error': f'PaddleOCR error: {str(e)}'
            }
    
    def _run_ocr(self, image: np.ndarray) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ OCR —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            logger.info(f"üîç –ó–∞–ø—É—Å–∫ PaddleOCR –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {image.shape}...")
            
            # –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ PaddleOCR 3.0 - –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ OCR —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ PaddleOCR 3.0")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if len(image.shape) == 3 and image.shape[2] == 3:
                # RGB –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BGR –¥–ª—è PaddleOCR
                import cv2
                image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
                logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ RGB -> BGR: {image_bgr.shape}")
            else:
                image_bgr = image
                
            # –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ OCR (–±–µ–∑ cls - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö)
            result = self.ocr.ocr(image_bgr)
            
            logger.info(f"üìä OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∏–ø: {type(result)}")
            logger.info(f"üìä OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª–∏–Ω–∞: {len(result) if result else 'None'}")
            
            if not result:
                logger.warning("‚ö†Ô∏è OCR –≤–µ—Ä–Ω—É–ª None - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
                return {
                    'has_text': False,
                    'text_content': '',
                    'confidence': 0.0,
                    'regions_count': 0
                }
            
            # PaddleOCR –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if not isinstance(result, list) or len(result) == 0:
                logger.warning("‚ö†Ô∏è OCR –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                return {
                    'has_text': False,
                    'text_content': '',
                    'confidence': 0.0,
                    'regions_count': 0
                }
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page_result = result[0]
            logger.info(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∏–ø: {type(page_result)}, –¥–ª–∏–Ω–∞: {len(page_result) if page_result else 'None'}")
            
            if not page_result:
                logger.warning("‚ö†Ô∏è –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ OCR –ø—É—Å—Ç–∞ - —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return {
                    'has_text': False,
                    'text_content': '',
                    'confidence': 0.0,
                    'regions_count': 0
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ page_result –Ω–µ None
            if page_result is None:
                logger.error("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ None!")
                return {
                    'has_text': False,
                    'text_content': '',
                    'confidence': 0.0,
                    'regions_count': 0
                }
            
            if not isinstance(page_result, list):
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {type(page_result)}")
                # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ø–∏—Å–æ–∫
                try:
                    page_result = list(page_result)
                    logger.info(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–ø–∏—Å–æ–∫: {len(page_result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {e}")
                    return {
                        'has_text': False,
                        'text_content': '',
                        'confidence': 0.0,
                        'regions_count': 0
                    }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PaddleOCR
            text_lines = []
            confidences = []
            
            logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(page_result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            
            for i, item in enumerate(page_result):
                logger.info(f"üìä –≠–ª–µ–º–µ–Ω—Ç {i}: —Ç–∏–ø={type(item)}, –¥–ª–∏–Ω–∞={len(item) if hasattr(item, '__len__') else 'N/A'}")
                
                if item and len(item) >= 2:
                    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: [bbox, (text, confidence)]
                    bbox = item[0]
                    text_info = item[1]
                    
                    logger.info(f"üìä bbox: {bbox}")
                    logger.info(f"üìä text_info: {text_info}, —Ç–∏–ø: {type(text_info)}")
                    
                    if isinstance(text_info, (list, tuple)) and len(text_info) >= 2:
                        text, confidence = text_info[0], text_info[1]
                        logger.info(f"üìä –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç: '{text}' —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence}")
                        text_lines.append(str(text))
                        confidences.append(float(confidence))
                    elif isinstance(text_info, str):
                        # –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                        logger.info(f"üìä –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç (—Å—Ç—Ä–æ–∫–∞): '{text_info}'")
                        text_lines.append(str(text_info))
                        confidences.append(0.8)  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                else:
                    logger.warning(f"üìä –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç {i}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
            
            logger.info(f"üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã: {text_lines}")
            logger.info(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidences}")
            
            full_text = ' '.join(text_lines)
            avg_confidence = np.mean(confidences) if confidences else 0.0
            
            logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{full_text}'")
            logger.info(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            multiple_fonts = self._detect_multiple_fonts(page_result, text_lines, confidences)
            
            return {
                'has_text': len(full_text.strip()) > 0,
                'text_content': full_text,
                'confidence': avg_confidence,
                'regions_count': len(text_lines),
                'multiple_fonts': multiple_fonts
            }
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ OCR: {e}")
            return {
                'has_text': False,
                'error': str(e)
            }
    
    def _detect_multiple_fonts(self, page_result: List, text_lines: List[str], confidences: List[float]) -> bool:
        """–£–ú–ù–ê–Ø –¥–µ—Ç–µ–∫—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞"""
        try:
            full_text = ' '.join(text_lines).strip()
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞: '{full_text}' ({len(page_result)} —Ä–µ–≥–∏–æ–Ω–æ–≤)")
            
            # 0. –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ - –í–°–ï–ì–î–ê –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç
            words = full_text.split()
            if len(words) == 1:
                logger.info(f"üìä –û–î–ù–û –°–õ–û–í–û '{words[0]}' - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç")
                return False
            
            # 1. –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ - —Ç–æ—á–Ω–æ –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç
            if len(page_result) < 3:
                logger.info("üìä –ú–∞–ª–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ - –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç")
                return False
            
            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç
            words = full_text.split()
            word_count = len(words)
            
            # –û–ß–ï–ù–¨ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ - –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 5 —Å–ª–æ–≤, —Ç–æ—á–Ω–æ –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç
            if word_count <= 4:
                logger.info(f"üìä –ú–∞–ª–æ —Å–ª–æ–≤ ({word_count}) - –û–ü–†–ï–î–ï–õ–ï–ù–ù–û –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç")
                return False
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞–∑–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±–ª–æ–∫–∏, –∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            uppercase_words = [w for w in words if w.isupper() and len(w) > 2]
            lowercase_words = [w for w in words if w.islower() and len(w) > 2]
            mixed_words = [w for w in words if not w.isupper() and not w.islower() and len(w) > 2]
            
            logger.info(f"üìä –°–ª–æ–≤–∞: –∑–∞–≥–ª–∞–≤–Ω—ã–µ={len(uppercase_words)}, —Å—Ç—Ä–æ—á–Ω—ã–µ={len(lowercase_words)}, —Å–º–µ—à–∞–Ω–Ω—ã–µ={len(mixed_words)}")
            
            # –û–ß–ï–ù–¨ —Å—Ç—Ä–æ–≥–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤
            if len(uppercase_words) >= 3 and len(lowercase_words) >= 5 and word_count >= 12:
                logger.info("üìä –ù–∞–π–¥–µ–Ω—ã –ú–ù–û–ì–û –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤ + –ú–ù–û–ì–û –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")
                return True
            else:
                logger.info(f"üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è: –∑–∞–≥–ª–∞–≤–Ω—ã–µ={len(uppercase_words)}, —Å—Ç—Ä–æ—á–Ω—ã–µ={len(lowercase_words)}, –≤—Å–µ–≥–æ={word_count}")
                logger.info("üìä –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –û–î–ò–ù —à—Ä–∏—Ñ—Ç –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∞–Ω–∞–ª–∏–∑—É")
            
            # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            areas = []
            heights = []
            widths = []
            
            for item in page_result:
                if item and len(item) >= 2:
                    bbox = item[0]  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–æ–∫—Å–∞
                    if len(bbox) >= 4:
                        # bbox –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ [[x1,y1], [x2,y2], [x3,y3], [x4,y4]]
                        if isinstance(bbox[0], (list, tuple)):
                            # –ù–∞—Ö–æ–¥–∏–º min/max –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                            x_coords = [point[0] for point in bbox]
                            y_coords = [point[1] for point in bbox]
                            width = max(x_coords) - min(x_coords)
                            height = max(y_coords) - min(y_coords)
                        else:
                            # bbox –≤ —Ñ–æ—Ä–º–∞—Ç–µ [x1, y1, x2, y2]
                            width = abs(bbox[2] - bbox[0])
                            height = abs(bbox[3] - bbox[1])
                        
                        area = width * height
                        areas.append(area)
                        heights.append(height)
                        widths.append(width)
            
            if len(areas) < 2:
                logger.info("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç")
                return False
            
            # 5. –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ - –∏—â–µ–º –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            areas = np.array(areas)
            heights = np.array(heights) 
            widths = np.array(widths)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            sorted_areas = np.sort(areas)
            sorted_heights = np.sort(heights)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á–µ—Ç–∫–∏–µ –≥—Ä—É–ø–ø—ã —Ä–∞–∑–º–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–æ–∫ vs —Ç–µ–∫—Å—Ç)
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏
            median_area = np.median(areas)
            large_areas = areas[areas > median_area * 2]  # –û–±–ª–∞—Å—Ç–∏ –≤ 2+ —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –º–µ–¥–∏–∞–Ω—ã
            small_areas = areas[areas < median_area / 2]  # –û–±–ª–∞—Å—Ç–∏ –≤ 2+ —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ –º–µ–¥–∏–∞–Ω—ã
            
            logger.info(f"üìä –†–∞–∑–º–µ—Ä—ã: –±–æ–ª—å—à–∏—Ö={len(large_areas)}, –º–∞–ª–µ–Ω—å–∫–∏—Ö={len(small_areas)}, –≤—Å–µ–≥–æ={len(areas)}")
            
            # –£–õ–¨–¢–†–ê —Å—Ç—Ä–æ–≥–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏
            if len(large_areas) >= 3 and len(small_areas) >= 3 and len(areas) >= 10:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑–Ω—ã–µ –±—É–∫–≤—ã –æ–¥–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
                area_ratio = np.max(areas) / np.min(areas)
                height_ratio = np.max(heights) / np.min(heights)
                
                logger.info(f"üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è: area={area_ratio:.1f}, height={height_ratio:.1f}")
                
                # –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø —Ä–∞–∑–Ω–∏—Ü–∞ + –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ = –≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–∞–∑–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
                if area_ratio > 15.0 and height_ratio > 8.0:
                    logger.info("‚úÖ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –®–†–ò–§–¢–´: –ö–û–°–ú–ò–ß–ï–°–ö–ê–Ø —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö")
                    return True
                else:
                    logger.info(f"üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: area={area_ratio:.1f} (–Ω—É–∂–Ω–æ >15), height={height_ratio:.1f} (–Ω—É–∂–Ω–æ >8)")
            else:
                logger.info(f"üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—É–ø–ø: –±–æ–ª—å—à–∏—Ö={len(large_areas)} (–Ω—É–∂–Ω–æ ‚â•3), –º–∞–ª–µ–Ω—å–∫–∏—Ö={len(small_areas)} (–Ω—É–∂–Ω–æ ‚â•3), –≤—Å–µ–≥–æ={len(areas)} (–Ω—É–∂–Ω–æ ‚â•10)")
            
            # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å—á–∏—Ç–∞–µ–º –æ–¥–Ω–∏–º —à—Ä–∏—Ñ—Ç–æ–º
            logger.info("üìä –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ –û–î–ò–ù —à—Ä–∏—Ñ—Ç")
            return False
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)
            return False
    
    def _preprocess_image(self, image: np.ndarray) -> List[np.ndarray]:
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        try:
            import cv2
            
            processed_images = []
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            processed_images.append(image.copy())
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            try:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Lab —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
                lab = cv2.cvtColor(image, cv2.COLOR_RGB2LAB)
                l, a, b = cv2.split(lab)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º CLAHE (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã)
                clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8))
                l = clahe.apply(l)
                
                # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                enhanced = cv2.merge([l, a, b])
                enhanced = cv2.cvtColor(enhanced, cv2.COLOR_LAB2RGB)
                processed_images.append(enhanced)
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ —Å —É–ª—É—á—à–µ–Ω–∏–µ–º
            try:
                gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
                clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
                gray_enhanced = clahe.apply(gray)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB
                gray_rgb = cv2.cvtColor(gray_enhanced, cv2.COLOR_GRAY2RGB)
                processed_images.append(gray_rgb)
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–æ–≥–æ: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 4: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
            try:
                # Kernel –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–µ–∑–∫–æ—Å—Ç–∏
                kernel = np.array([[-1,-1,-1],
                                 [-1, 9,-1],
                                 [-1,-1,-1]])
                sharpened = cv2.filter2D(image, -1, kernel)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                sharpened = np.clip(sharpened, 0, 255).astype(np.uint8)
                processed_images.append(sharpened)
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–µ–∑–∫–æ—Å—Ç–∏: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 5: –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            try:
                gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
                binary = cv2.adaptiveThreshold(
                    gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                    cv2.THRESH_BINARY, 11, 2
                )
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
                binary_rgb = cv2.cvtColor(binary, cv2.COLOR_GRAY2RGB)
                processed_images.append(binary_rgb)
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            
            logger.info(f"üîß –°–æ–∑–¥–∞–Ω–æ {len(processed_images)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return processed_images
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return [image]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    
    def _fallback_text_detection(self, image: np.ndarray) -> Dict[str, Any]:
        """Fallback –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ PaddleOCR"""
        try:
            import cv2
            
            logger.info("üîç –ó–∞–ø—É—Å–∫ fallback –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä—ã–π
            if len(image.shape) == 3:
                gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
            else:
                gray = image
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            contrast = np.std(gray.astype(np.float64))
            logger.info(f"üìä –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: {contrast}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            mean_brightness = np.mean(gray)
            min_val, max_val = np.min(gray), np.max(gray)
            brightness_range = max_val - min_val
            logger.info(f"üìä –Ø—Ä–∫–æ—Å—Ç—å: —Å—Ä–µ–¥–Ω—è—è={mean_brightness:.1f}, –¥–∏–∞–ø–∞–∑–æ–Ω={brightness_range}")
            
            # –ò—â–µ–º –∫—Ä–∞—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
            edges_soft = cv2.Canny(gray, 30, 100)  # –ú—è–≥–∫–∏–µ –ø–æ—Ä–æ–≥–∏
            edges_normal = cv2.Canny(gray, 50, 150)  # –û–±—ã—á–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            edges_hard = cv2.Canny(gray, 100, 200)  # –ñ–µ—Å—Ç–∫–∏–µ –ø–æ—Ä–æ–≥–∏
            
            edge_density_soft = np.sum(edges_soft > 0) / (edges_soft.shape[0] * edges_soft.shape[1])
            edge_density_normal = np.sum(edges_normal > 0) / (edges_normal.shape[0] * edges_normal.shape[1])
            edge_density_hard = np.sum(edges_hard > 0) / (edges_hard.shape[0] * edges_hard.shape[1])
            
            logger.info(f"üìä –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä–∞–Ω–∏—Ü: –º—è–≥–∫–∏–µ={edge_density_soft:.4f}, –æ–±—ã—á–Ω—ã–µ={edge_density_normal:.4f}, –∂–µ—Å—Ç–∫–∏–µ={edge_density_hard:.4f}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            edges = edges_soft if edge_density_soft > edge_density_normal else edges_normal
            edge_density = max(edge_density_soft, edge_density_normal, edge_density_hard)
            
            # –ò—â–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
            contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            text_like_regions = 0
            for contour in contours:
                area = cv2.contourArea(contour)
                if 100 < area < 50000:  # –†–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = w / h if h > 0 else 0
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
                    if 0.1 < aspect_ratio < 10.0:
                        text_like_regions += 1
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–ø–æ–¥–æ–±–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: {text_like_regions}")
            
            # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞
            has_text = (
                contrast > 15 and              # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
                edge_density > 0.005 and       # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –≥—Ä–∞–Ω–∏—Ü
                text_like_regions >= 2         # –ü–æ–Ω–∏–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∞—Å—Ç–µ–π
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if not has_text:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ü–≤–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (—Ä–µ–∫–ª–∞–º–∞ —á–∞—Å—Ç–æ —Ü–≤–µ—Ç–Ω–∞—è)
                if len(image.shape) == 3:
                    color_variance = np.var(image, axis=2).mean()
                    logger.info(f"üìä –¶–≤–µ—Ç–æ–≤–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è: {color_variance}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç - –≤–µ—Ä–æ—è—Ç–Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                    if color_variance > 100 and contrast > 10:
                        has_text = True
                        logger.info("üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–≤–µ—Ç–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–µ–∫–ª–∞–º–∞ —Å —Ç–µ–∫—Å—Ç–æ–º")
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–µ–∫—Å—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            multiple_fonts = False
            if has_text and text_like_regions >= 4:  # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–±–ª–∞—Å—Ç–µ–π
                areas = []
                for contour in contours:
                    area = cv2.contourArea(contour)
                    if 100 < area < 50000:
                        areas.append(area)
                
                if len(areas) >= 3:
                    areas = np.array(areas)
                    area_ratio = np.max(areas) / np.min(areas) if np.min(areas) > 0 else 0
                    if area_ratio > 4.0:  # –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö
                        multiple_fonts = True
                        logger.info(f"üî§ Fallback: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (ratio={area_ratio:.1f})")
            
            result = {
                'has_text': has_text,
                'text_content': '–¢–µ–∫—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω fallback –º–µ—Ç–æ–¥–æ–º' if has_text else '',
                'confidence': 0.7 if has_text else 0.0,
                'regions_count': text_like_regions,
                'multiple_fonts': multiple_fonts,
                'method': 'fallback'
            }
            
            logger.info(f"üîç Fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return result
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ fallback –º–µ—Ç–æ–¥–∞: {e}")
            return {
                'has_text': False,
                'error': f'Fallback error: {str(e)}'
            }
