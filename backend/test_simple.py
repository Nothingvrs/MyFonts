#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç PaddleOCR –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.services.paddleocr_service import PaddleOCRService
import numpy as np
import cv2

def test_paddleocr():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º PaddleOCR"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º PaddleOCR...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    img = np.ones((200, 400, 3), dtype=np.uint8) * 255
    cv2.putText(img, "Test Text", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 0), 2)
    
    print(f"üì∏ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img.shape}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PaddleOCR
    service = PaddleOCRService()
    
    if not service.is_available():
        print("‚ùå PaddleOCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    print("‚úÖ PaddleOCR –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
    try:
        result = service._run_ocr_sync(img)
        print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")
        
        if result.get('has_text'):
            print("‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω!")
            print(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result.get('text_content')}")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence')}")
            print(f"üî§ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã: {result.get('multiple_fonts')}")
        else:
            print("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print(f"üí° –û—à–∏–±–∫–∞: {result.get('error')}")
        
        return result.get('has_text', False)
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return False

if __name__ == "__main__":
    success = test_paddleocr()
    if success:
        print("üéâ –¢–µ—Å—Ç PaddleOCR –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("üí• –¢–µ—Å—Ç PaddleOCR –Ω–µ –ø—Ä–æ—à–µ–ª!")
