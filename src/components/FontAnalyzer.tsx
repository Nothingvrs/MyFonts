import React, { useEffect, useState } from 'react'
import { apiClient, type FontMatch } from '../services/apiClient'

interface FontAnalyzerProps {
	image: File
	onAnalysisStart: () => void
	onAnalysisComplete: (results: FontMatch[], error?: string) => void
}

const FontAnalyzer: React.FC<FontAnalyzerProps> = ({
	image,
	onAnalysisStart,
	onAnalysisComplete,
}) => {
	const [imageUrl, setImageUrl] = useState<string | null>(null)
	const [isServerConnected, setIsServerConnected] = useState<boolean | null>(
		null
	)
	const [connectionError, setConnectionError] = useState<string>('')
	const [isPending, setIsPending] = useState<boolean>(false)

	useEffect(() => {
		// –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const url = URL.createObjectURL(image)
		setImageUrl(url)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend —Å–µ—Ä–≤–µ—Ä—É
		const checkBackendConnection = async () => {
			try {
				console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ backend —Å–µ—Ä–≤–µ—Ä—É...')
				const isConnected = await apiClient.checkServerConnection()
				setIsServerConnected(isConnected)

				if (isConnected) {
					console.log('‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω')
					setConnectionError('')
				} else {
					console.log('‚ùå Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
					setConnectionError(
						'Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000'
					)
				}
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
				setIsServerConnected(false)
				setConnectionError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
			}
		}

		checkBackendConnection()

		return () => {
			URL.revokeObjectURL(url)
		}
	}, [image])

	const analyzeImage = async () => {
		if (isPending) return
		if (isServerConnected === null) {
			console.warn('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
			return
		}

		if (!isServerConnected) {
			console.error('Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
			generateMockResults()
			return
		}

		onAnalysisStart()
		setIsPending(true)

		try {
			console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ backend –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...')

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ backend
			const result = await apiClient.analyzeFont(image)

			console.log('–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç backend:', result)

			if (result.success) {
				onAnalysisComplete(result.matches)
			} else {
				onAnalysisComplete([], result.message)
			}
		} catch (error: any) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ backend:', error)
			const message =
				typeof error?.message === 'string'
					? error.message
					: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'
			onAnalysisComplete([], message)
		} finally {
			setIsPending(false)
		}
	}

	const generateMockResults = () => {
		const mockResults: FontMatch[] = [
			{ name: 'Times New Roman', confidence: 0.85 },
			{ name: 'Georgia', confidence: 0.72 },
			{ name: 'PT Serif', confidence: 0.68 },
			{ name: 'Liberation Serif', confidence: 0.61 },
			{ name: 'DejaVu Sans', confidence: 0.55 },
			{ name: 'Arial', confidence: 0.48 },
			{ name: 'Open Sans', confidence: 0.42 },
			{ name: 'Roboto', confidence: 0.38 },
			{ name: 'PT Sans', confidence: 0.33 },
			{ name: 'Source Sans Pro', confidence: 0.28 },
		]
		onAnalysisComplete(mockResults)
	}

	return (
		<div className='my-8'>
			<div className='card text-center'>
				<h3 className='text-xl font-semibold text-gray-800 mb-6'>
					–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:
				</h3>
				{imageUrl && (
					<img
						src={imageUrl}
						alt='Uploaded'
						className='max-w-full max-h-96 lg:max-h-[500px] xl:max-h-[600px] mx-auto rounded-lg shadow-md mb-6 object-contain'
					/>
				)}
				{/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É */}
				{isServerConnected === null && (
					<div className='mb-4 p-3 bg-blue-100 border border-blue-300 rounded-lg'>
						<div className='flex items-center gap-2'>
							<div className='w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin'></div>
							<span className='text-blue-700'>
								–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...
							</span>
						</div>
					</div>
				)}

				{isServerConnected === false && (
					<div className='mb-4 p-3 bg-red-100 border border-red-300 rounded-lg'>
						<div className='text-red-700'>
							<strong>‚ö†Ô∏è Backend —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</strong>
							<p className='text-sm mt-1'>{connectionError}</p>
							<p className='text-sm mt-1'>–ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ.</p>
						</div>
					</div>
				)}

				{isServerConnected === true && (
					<div className='mb-4 p-3 bg-green-100 border border-green-300 rounded-lg'>
						<div className='text-green-700'>
							<strong>üá∑üá∫ –°–µ—Ä–≤–∏—Å –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –≥–æ—Ç–æ–≤</strong>
							<p className='text-sm mt-1'>
								–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—É—Å—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é PaddleOCR –∏
								–ò–ò. –ü–µ—Ä–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤!
							</p>
						</div>
					</div>
				)}

				<button
					onClick={analyzeImage}
					disabled={!isServerConnected || isPending}
					className={`text-lg px-8 py-3 ${
						isServerConnected && !isPending
							? 'btn-primary'
							: 'bg-gray-400 text-white cursor-not-allowed rounded-lg font-semibold'
					}`}
				>
					{isServerConnected ? (
						isPending ? (
							<span className='inline-flex items-center gap-2'>
								<span className='w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin'></span>
								<span>
									–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞‚Ä¶
								</span>
							</span>
						) : (
							'üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç (AI)'
						)
					) : (
						'–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä...'
					)}
				</button>
			</div>
		</div>
	)
}

export default FontAnalyzer
